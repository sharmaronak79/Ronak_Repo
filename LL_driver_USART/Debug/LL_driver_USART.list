
LL_driver_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000564  08000564  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000564  08000564  00002008  2**0
                  CONTENTS
  4 .ARM          00000000  08000564  08000564  00002008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000564  08000564  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000564  08000564  00001564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000568  08000568  00001568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  0800056c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  08000574  00002008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000574  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018a7  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000633  00000000  00000000  000038df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00003f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a0  00000000  00000000  00004168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264cc  00000000  00000000  00004308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a23  00000000  00000000  0002a7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec883  00000000  00000000  0002d1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119a7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000760  00000000  00000000  00119ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0011a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000008 	.word	0x20000008
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800054c 	.word	0x0800054c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000000c 	.word	0x2000000c
 80001e8:	0800054c 	.word	0x0800054c

080001ec <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001f4:	4b08      	ldr	r3, [pc, #32]	@ (8000218 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001f8:	4907      	ldr	r1, [pc, #28]	@ (8000218 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000200:	4b05      	ldr	r3, [pc, #20]	@ (8000218 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000202:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4013      	ands	r3, r2
 8000208:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800020a:	68fb      	ldr	r3, [r7, #12]
}
 800020c:	bf00      	nop
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	40021000 	.word	0x40021000

0800021c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800021c:	b480      	push	{r7}
 800021e:	b08b      	sub	sp, #44	@ 0x2c
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	fa93 f3a3 	rbit	r3, r3
 8000236:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000238:	693b      	ldr	r3, [r7, #16]
 800023a:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d101      	bne.n	8000246 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000242:	2320      	movs	r3, #32
 8000244:	e003      	b.n	800024e <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000246:	69bb      	ldr	r3, [r7, #24]
 8000248:	fab3 f383 	clz	r3, r3
 800024c:	b2db      	uxtb	r3, r3
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	2103      	movs	r1, #3
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43db      	mvns	r3, r3
 8000258:	401a      	ands	r2, r3
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800025e:	6a3b      	ldr	r3, [r7, #32]
 8000260:	fa93 f3a3 	rbit	r3, r3
 8000264:	61fb      	str	r3, [r7, #28]
  return result;
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800026a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800026c:	2b00      	cmp	r3, #0
 800026e:	d101      	bne.n	8000274 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000270:	2320      	movs	r3, #32
 8000272:	e003      	b.n	800027c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000276:	fab3 f383 	clz	r3, r3
 800027a:	b2db      	uxtb	r3, r3
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	6879      	ldr	r1, [r7, #4]
 8000280:	fa01 f303 	lsl.w	r3, r1, r3
 8000284:	431a      	orrs	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	372c      	adds	r7, #44	@ 0x2c
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
 800029e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	691a      	ldr	r2, [r3, #16]
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	4013      	ands	r3, r2
 80002a8:	683a      	ldr	r2, [r7, #0]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d101      	bne.n	80002b2 <LL_GPIO_IsInputPinSet+0x1c>
 80002ae:	2301      	movs	r3, #1
 80002b0:	e000      	b.n	80002b4 <LL_GPIO_IsInputPinSet+0x1e>
 80002b2:	2300      	movs	r3, #0
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	683a      	ldr	r2, [r7, #0]
 80002ce:	619a      	str	r2, [r3, #24]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	683a      	ldr	r2, [r7, #0]
 80002ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <btn_seq_led>:
			LL_GPIO_ResetOutputPin (GPIOC,LL_GPIO_PIN_7 );
		}
	}
}

void btn_seq_led(void){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
	/* Enable clock for a GPIOB and GPIOC */
	LL_AHB2_GRP1_EnableClock (LL_AHB2_GRP1_PERIPH_GPIOB);
 80002fe:	2002      	movs	r0, #2
 8000300:	f7ff ff74 	bl	80001ec <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock (LL_AHB2_GRP1_PERIPH_GPIOC);
 8000304:	2004      	movs	r0, #4
 8000306:	f7ff ff71 	bl	80001ec <LL_AHB2_GRP1_EnableClock>

	/* set a pin and output type*/
	LL_GPIO_SetPinMode (GPIOB,LL_GPIO_PIN_7 , LL_GPIO_MODE_OUTPUT);
 800030a:	2201      	movs	r2, #1
 800030c:	2180      	movs	r1, #128	@ 0x80
 800030e:	4836      	ldr	r0, [pc, #216]	@ (80003e8 <btn_seq_led+0xf0>)
 8000310:	f7ff ff84 	bl	800021c <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode (GPIOB,LL_GPIO_PIN_14 , LL_GPIO_MODE_OUTPUT);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800031a:	4833      	ldr	r0, [pc, #204]	@ (80003e8 <btn_seq_led+0xf0>)
 800031c:	f7ff ff7e 	bl	800021c <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode (GPIOC,LL_GPIO_PIN_7 , LL_GPIO_MODE_OUTPUT);
 8000320:	2201      	movs	r2, #1
 8000322:	2180      	movs	r1, #128	@ 0x80
 8000324:	4831      	ldr	r0, [pc, #196]	@ (80003ec <btn_seq_led+0xf4>)
 8000326:	f7ff ff79 	bl	800021c <LL_GPIO_SetPinMode>

	/* Set PC13 as input user button*/
	LL_GPIO_SetPinMode (GPIOC,LL_GPIO_PIN_13 , LL_GPIO_MODE_INPUT);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000330:	482e      	ldr	r0, [pc, #184]	@ (80003ec <btn_seq_led+0xf4>)
 8000332:	f7ff ff73 	bl	800021c <LL_GPIO_SetPinMode>
	static int i = 1;
	while(1)
	{

		if (LL_GPIO_IsInputPinSet (GPIOC,LL_GPIO_PIN_13 ))
 8000336:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800033a:	482c      	ldr	r0, [pc, #176]	@ (80003ec <btn_seq_led+0xf4>)
 800033c:	f7ff ffab 	bl	8000296 <LL_GPIO_IsInputPinSet>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d045      	beq.n	80003d2 <btn_seq_led+0xda>
			{
				switch (i){
 8000346:	4b2a      	ldr	r3, [pc, #168]	@ (80003f0 <btn_seq_led+0xf8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b03      	cmp	r3, #3
 800034c:	d02f      	beq.n	80003ae <btn_seq_led+0xb6>
 800034e:	2b03      	cmp	r3, #3
 8000350:	dcf1      	bgt.n	8000336 <btn_seq_led+0x3e>
 8000352:	2b01      	cmp	r3, #1
 8000354:	d002      	beq.n	800035c <btn_seq_led+0x64>
 8000356:	2b02      	cmp	r3, #2
 8000358:	d014      	beq.n	8000384 <btn_seq_led+0x8c>
 800035a:	e043      	b.n	80003e4 <btn_seq_led+0xec>
				case 1:
					LL_GPIO_SetOutputPin (GPIOB,LL_GPIO_PIN_7);
 800035c:	2180      	movs	r1, #128	@ 0x80
 800035e:	4822      	ldr	r0, [pc, #136]	@ (80003e8 <btn_seq_led+0xf0>)
 8000360:	f7ff ffae 	bl	80002c0 <LL_GPIO_SetOutputPin>
					for(int itr = 0; itr< 90000;itr++){};
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	e002      	b.n	8000370 <btn_seq_led+0x78>
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	3301      	adds	r3, #1
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	4a20      	ldr	r2, [pc, #128]	@ (80003f4 <btn_seq_led+0xfc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	ddf8      	ble.n	800036a <btn_seq_led+0x72>
					i++;
 8000378:	4b1d      	ldr	r3, [pc, #116]	@ (80003f0 <btn_seq_led+0xf8>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	3301      	adds	r3, #1
 800037e:	4a1c      	ldr	r2, [pc, #112]	@ (80003f0 <btn_seq_led+0xf8>)
 8000380:	6013      	str	r3, [r2, #0]
					break;
 8000382:	e02f      	b.n	80003e4 <btn_seq_led+0xec>
				case 2:
					LL_GPIO_SetOutputPin (GPIOB,LL_GPIO_PIN_14);
 8000384:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000388:	4817      	ldr	r0, [pc, #92]	@ (80003e8 <btn_seq_led+0xf0>)
 800038a:	f7ff ff99 	bl	80002c0 <LL_GPIO_SetOutputPin>
					for(int itr = 0; itr< 90000;itr++){};
 800038e:	2300      	movs	r3, #0
 8000390:	60bb      	str	r3, [r7, #8]
 8000392:	e002      	b.n	800039a <btn_seq_led+0xa2>
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	3301      	adds	r3, #1
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	4a15      	ldr	r2, [pc, #84]	@ (80003f4 <btn_seq_led+0xfc>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	ddf8      	ble.n	8000394 <btn_seq_led+0x9c>
					i++;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <btn_seq_led+0xf8>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	3301      	adds	r3, #1
 80003a8:	4a11      	ldr	r2, [pc, #68]	@ (80003f0 <btn_seq_led+0xf8>)
 80003aa:	6013      	str	r3, [r2, #0]
					break;
 80003ac:	e01a      	b.n	80003e4 <btn_seq_led+0xec>
				case 3:
					LL_GPIO_SetOutputPin (GPIOC,LL_GPIO_PIN_7);
 80003ae:	2180      	movs	r1, #128	@ 0x80
 80003b0:	480e      	ldr	r0, [pc, #56]	@ (80003ec <btn_seq_led+0xf4>)
 80003b2:	f7ff ff85 	bl	80002c0 <LL_GPIO_SetOutputPin>
					for(int itr = 0; itr< 90000;itr++){};
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	e002      	b.n	80003c2 <btn_seq_led+0xca>
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3301      	adds	r3, #1
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a0b      	ldr	r2, [pc, #44]	@ (80003f4 <btn_seq_led+0xfc>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	ddf8      	ble.n	80003bc <btn_seq_led+0xc4>
					i = 1;
 80003ca:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <btn_seq_led+0xf8>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	601a      	str	r2, [r3, #0]
					break;
 80003d0:	e008      	b.n	80003e4 <btn_seq_led+0xec>
				}

			}
		else
			{
				LL_GPIO_ResetOutputPin (GPIOB,LL_GPIO_PIN_7 | LL_GPIO_PIN_14);
 80003d2:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80003d6:	4804      	ldr	r0, [pc, #16]	@ (80003e8 <btn_seq_led+0xf0>)
 80003d8:	f7ff ff80 	bl	80002dc <LL_GPIO_ResetOutputPin>
				LL_GPIO_ResetOutputPin (GPIOC,LL_GPIO_PIN_7 );
 80003dc:	2180      	movs	r1, #128	@ 0x80
 80003de:	4803      	ldr	r0, [pc, #12]	@ (80003ec <btn_seq_led+0xf4>)
 80003e0:	f7ff ff7c 	bl	80002dc <LL_GPIO_ResetOutputPin>
		if (LL_GPIO_IsInputPinSet (GPIOC,LL_GPIO_PIN_13 ))
 80003e4:	e7a7      	b.n	8000336 <btn_seq_led+0x3e>
 80003e6:	bf00      	nop
 80003e8:	48000400 	.word	0x48000400
 80003ec:	48000800 	.word	0x48000800
 80003f0:	20000000 	.word	0x20000000
 80003f4:	00015f8f 	.word	0x00015f8f

080003f8 <main>:
//#include "stm32l4xx_ll_bus.h"
//#include "stm32l4xx_ll_gpio.h"

#include "gpio_led.h"

int main(){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0

//	button_led();
	btn_seq_led();
 80003fc:	f7ff ff7c 	bl	80002f8 <btn_seq_led>

	return 0;
 8000400:	2300      	movs	r3, #0
}
 8000402:	4618      	mov	r0, r3
 8000404:	bd80      	pop	{r7, pc}

08000406 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800040a:	bf00      	nop
 800040c:	e7fd      	b.n	800040a <NMI_Handler+0x4>

0800040e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000412:	bf00      	nop
 8000414:	e7fd      	b.n	8000412 <HardFault_Handler+0x4>

08000416 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041a:	bf00      	nop
 800041c:	e7fd      	b.n	800041a <MemManage_Handler+0x4>

0800041e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000422:	bf00      	nop
 8000424:	e7fd      	b.n	8000422 <BusFault_Handler+0x4>

08000426 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800042a:	bf00      	nop
 800042c:	e7fd      	b.n	800042a <UsageFault_Handler+0x4>

0800042e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045c:	f000 f83e 	bl	80004dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <SystemInit+0x20>)
 800046a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800046e:	4a05      	ldr	r2, [pc, #20]	@ (8000484 <SystemInit+0x20>)
 8000470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	e000ed00 	.word	0xe000ed00

08000488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000488:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800048c:	f7ff ffea 	bl	8000464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000490:	480c      	ldr	r0, [pc, #48]	@ (80004c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000492:	490d      	ldr	r1, [pc, #52]	@ (80004c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000494:	4a0d      	ldr	r2, [pc, #52]	@ (80004cc <LoopForever+0xe>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000498:	e002      	b.n	80004a0 <LoopCopyDataInit>

0800049a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800049c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049e:	3304      	adds	r3, #4

080004a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a4:	d3f9      	bcc.n	800049a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a6:	4a0a      	ldr	r2, [pc, #40]	@ (80004d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a8:	4c0a      	ldr	r4, [pc, #40]	@ (80004d4 <LoopForever+0x16>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ac:	e001      	b.n	80004b2 <LoopFillZerobss>

080004ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b0:	3204      	adds	r2, #4

080004b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b4:	d3fb      	bcc.n	80004ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004b6:	f000 f825 	bl	8000504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ba:	f7ff ff9d 	bl	80003f8 <main>

080004be <LoopForever>:

LoopForever:
    b LoopForever
 80004be:	e7fe      	b.n	80004be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80004cc:	0800056c 	.word	0x0800056c
  ldr r2, =_sbss
 80004d0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80004d4:	20000028 	.word	0x20000028

080004d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_2_IRQHandler>
	...

080004dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004e0:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <HAL_IncTick+0x20>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <HAL_IncTick+0x24>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4413      	add	r3, r2
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <HAL_IncTick+0x24>)
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000004 	.word	0x20000004
 8000500:	20000024 	.word	0x20000024

08000504 <__libc_init_array>:
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	4d0d      	ldr	r5, [pc, #52]	@ (800053c <__libc_init_array+0x38>)
 8000508:	4c0d      	ldr	r4, [pc, #52]	@ (8000540 <__libc_init_array+0x3c>)
 800050a:	1b64      	subs	r4, r4, r5
 800050c:	10a4      	asrs	r4, r4, #2
 800050e:	2600      	movs	r6, #0
 8000510:	42a6      	cmp	r6, r4
 8000512:	d109      	bne.n	8000528 <__libc_init_array+0x24>
 8000514:	4d0b      	ldr	r5, [pc, #44]	@ (8000544 <__libc_init_array+0x40>)
 8000516:	4c0c      	ldr	r4, [pc, #48]	@ (8000548 <__libc_init_array+0x44>)
 8000518:	f000 f818 	bl	800054c <_init>
 800051c:	1b64      	subs	r4, r4, r5
 800051e:	10a4      	asrs	r4, r4, #2
 8000520:	2600      	movs	r6, #0
 8000522:	42a6      	cmp	r6, r4
 8000524:	d105      	bne.n	8000532 <__libc_init_array+0x2e>
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	f855 3b04 	ldr.w	r3, [r5], #4
 800052c:	4798      	blx	r3
 800052e:	3601      	adds	r6, #1
 8000530:	e7ee      	b.n	8000510 <__libc_init_array+0xc>
 8000532:	f855 3b04 	ldr.w	r3, [r5], #4
 8000536:	4798      	blx	r3
 8000538:	3601      	adds	r6, #1
 800053a:	e7f2      	b.n	8000522 <__libc_init_array+0x1e>
 800053c:	08000564 	.word	0x08000564
 8000540:	08000564 	.word	0x08000564
 8000544:	08000564 	.word	0x08000564
 8000548:	08000568 	.word	0x08000568

0800054c <_init>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	bf00      	nop
 8000550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000552:	bc08      	pop	{r3}
 8000554:	469e      	mov	lr, r3
 8000556:	4770      	bx	lr

08000558 <_fini>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr
