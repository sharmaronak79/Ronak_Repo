
LL_USART_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001494  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001640  08001640  00002640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001688  08001688  0000310c  2**0
                  CONTENTS
  4 .ARM          00000000  08001688  08001688  0000310c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001688  08001688  0000310c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001688  08001688  00002688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800168c  0800168c  0000268c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08001690  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000010c  0800179c  0000310c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  0800179c  00003128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044bb  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e34  00000000  00000000  000075f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  00008430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e3  00000000  00000000  00008ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a59  00000000  00000000  00008fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000526f  00000000  00000000  0002aa04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba335  00000000  00000000  0002fc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9fa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019ec  00000000  00000000  000e9fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000eb9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000010c 	.word	0x2000010c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001628 	.word	0x08001628

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000110 	.word	0x20000110
 80001e8:	08001628 	.word	0x08001628

080001ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f003 0307 	and.w	r3, r3, #7
 80001fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <__NVIC_SetPriorityGrouping+0x44>)
 80001fe:	68db      	ldr	r3, [r3, #12]
 8000200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000202:	68ba      	ldr	r2, [r7, #8]
 8000204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000208:	4013      	ands	r3, r2
 800020a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800021c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800021e:	4a04      	ldr	r2, [pc, #16]	@ (8000230 <__NVIC_SetPriorityGrouping+0x44>)
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	60d3      	str	r3, [r2, #12]
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000238:	4b05      	ldr	r3, [pc, #20]	@ (8000250 <LL_RCC_HSI_Enable+0x1c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a04      	ldr	r2, [pc, #16]	@ (8000250 <LL_RCC_HSI_Enable+0x1c>)
 800023e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40021000 	.word	0x40021000

08000254 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000258:	4b07      	ldr	r3, [pc, #28]	@ (8000278 <LL_RCC_HSI_IsReady+0x24>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000264:	d101      	bne.n	800026a <LL_RCC_HSI_IsReady+0x16>
 8000266:	2301      	movs	r3, #1
 8000268:	e000      	b.n	800026c <LL_RCC_HSI_IsReady+0x18>
 800026a:	2300      	movs	r3, #0
}
 800026c:	4618      	mov	r0, r3
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000

0800027c <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000284:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	061b      	lsls	r3, r3, #24
 8000290:	4904      	ldr	r1, [pc, #16]	@ (80002a4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000292:	4313      	orrs	r3, r2
 8000294:	604b      	str	r3, [r1, #4]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000

080002a8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80002b0:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <LL_RCC_SetSysClkSource+0x24>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	f023 0203 	bic.w	r2, r3, #3
 80002b8:	4904      	ldr	r1, [pc, #16]	@ (80002cc <LL_RCC_SetSysClkSource+0x24>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4313      	orrs	r3, r2
 80002be:	608b      	str	r3, [r1, #8]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000

080002d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <LL_RCC_GetSysClkSource+0x18>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	f003 030c 	and.w	r3, r3, #12
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000

080002ec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <LL_RCC_SetAHBPrescaler+0x24>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80002fc:	4904      	ldr	r1, [pc, #16]	@ (8000310 <LL_RCC_SetAHBPrescaler+0x24>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4313      	orrs	r3, r2
 8000302:	608b      	str	r3, [r1, #8]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	40021000 	.word	0x40021000

08000314 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800031c:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <LL_RCC_SetAPB1Prescaler+0x24>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000324:	4904      	ldr	r1, [pc, #16]	@ (8000338 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4313      	orrs	r3, r2
 800032a:	608b      	str	r3, [r1, #8]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000

0800033c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800034c:	4904      	ldr	r1, [pc, #16]	@ (8000360 <LL_RCC_SetAPB2Prescaler+0x24>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4313      	orrs	r3, r2
 8000352:	608b      	str	r3, [r1, #8]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000

08000364 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800036c:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <LL_RCC_SetUSARTClockSource+0x30>)
 800036e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	0c1b      	lsrs	r3, r3, #16
 8000376:	43db      	mvns	r3, r3
 8000378:	401a      	ands	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	b29b      	uxth	r3, r3
 800037e:	4905      	ldr	r1, [pc, #20]	@ (8000394 <LL_RCC_SetUSARTClockSource+0x30>)
 8000380:	4313      	orrs	r3, r2
 8000382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800039c:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <LL_RCC_PLL_Enable+0x1c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a04      	ldr	r2, [pc, #16]	@ (80003b4 <LL_RCC_PLL_Enable+0x1c>)
 80003a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003a6:	6013      	str	r3, [r2, #0]
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000

080003b8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80003bc:	4b07      	ldr	r3, [pc, #28]	@ (80003dc <LL_RCC_PLL_IsReady+0x24>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80003c8:	d101      	bne.n	80003ce <LL_RCC_PLL_IsReady+0x16>
 80003ca:	2301      	movs	r3, #1
 80003cc:	e000      	b.n	80003d0 <LL_RCC_PLL_IsReady+0x18>
 80003ce:	2300      	movs	r3, #0
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
 80003ec:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80003ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000418 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80003f0:	68da      	ldr	r2, [r3, #12]
 80003f2:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80003f4:	4013      	ands	r3, r2
 80003f6:	68f9      	ldr	r1, [r7, #12]
 80003f8:	68ba      	ldr	r2, [r7, #8]
 80003fa:	4311      	orrs	r1, r2
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	0212      	lsls	r2, r2, #8
 8000400:	4311      	orrs	r1, r2
 8000402:	683a      	ldr	r2, [r7, #0]
 8000404:	430a      	orrs	r2, r1
 8000406:	4904      	ldr	r1, [pc, #16]	@ (8000418 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000408:	4313      	orrs	r3, r2
 800040a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000
 800041c:	f9ff808c 	.word	0xf9ff808c

08000420 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000424:	4b05      	ldr	r3, [pc, #20]	@ (800043c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	4a04      	ldr	r2, [pc, #16]	@ (800043c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800042a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800042e:	60d3      	str	r3, [r2, #12]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000

08000440 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000448:	4b08      	ldr	r3, [pc, #32]	@ (800046c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800044a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800044c:	4907      	ldr	r1, [pc, #28]	@ (800046c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4313      	orrs	r3, r2
 8000452:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000454:	4b05      	ldr	r3, [pc, #20]	@ (800046c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4013      	ands	r3, r2
 800045c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000

08000470 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <LL_APB1_GRP1_EnableClock+0x2c>)
 800047a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800047c:	4907      	ldr	r1, [pc, #28]	@ (800049c <LL_APB1_GRP1_EnableClock+0x2c>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000484:	4b05      	ldr	r3, [pc, #20]	@ (800049c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000486:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4013      	ands	r3, r2
 800048c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800048e:	68fb      	ldr	r3, [r7, #12]
}
 8000490:	bf00      	nop
 8000492:	3714      	adds	r7, #20
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000

080004a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004a8:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80004ac:	4907      	ldr	r1, [pc, #28]	@ (80004cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004b4:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4013      	ands	r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004be:	68fb      	ldr	r3, [r7, #12]
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <LL_FLASH_SetLatency+0x24>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f023 0207 	bic.w	r2, r3, #7
 80004e0:	4904      	ldr	r1, [pc, #16]	@ (80004f4 <LL_FLASH_SetLatency+0x24>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	600b      	str	r3, [r1, #0]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40022000 	.word	0x40022000

080004f8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004fc:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <LL_FLASH_GetLatency+0x18>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f003 0307 	and.w	r3, r3, #7
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40022000 	.word	0x40022000

08000514 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000524:	4904      	ldr	r1, [pc, #16]	@ (8000538 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	600b      	str	r3, [r1, #0]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40007000 	.word	0x40007000

0800053c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000540:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800054c:	d101      	bne.n	8000552 <LL_PWR_IsActiveFlag_VOS+0x16>
 800054e:	2301      	movs	r3, #1
 8000550:	e000      	b.n	8000554 <LL_PWR_IsActiveFlag_VOS+0x18>
 8000552:	2300      	movs	r3, #0
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40007000 	.word	0x40007000

08000564 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f043 0201 	orr.w	r2, r3, #1
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	601a      	str	r2, [r3, #0]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	609a      	str	r2, [r3, #8]
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f7ff ff72 	bl	80004a0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80005bc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80005c0:	f7ff ff56 	bl	8000470 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f7ff fe11 	bl	80001ec <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f81b 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f8bb 	bl	8000748 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005d2:	f000 f865 	bl	80006a0 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uart_write(dev->handle,'Z');
 80005d6:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <main+0x4c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	215a      	movs	r1, #90	@ 0x5a
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f8e0 	bl	80007a4 <uart_write>

	  for(int itr = 0;itr < 900000;itr++){};
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	e002      	b.n	80005f0 <main+0x40>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3301      	adds	r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a03      	ldr	r2, [pc, #12]	@ (8000600 <main+0x50>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	ddf8      	ble.n	80005ea <main+0x3a>
	  uart_write(dev->handle,'Z');
 80005f8:	e7ed      	b.n	80005d6 <main+0x26>
 80005fa:	bf00      	nop
 80005fc:	20000104 	.word	0x20000104
 8000600:	000dbb9f 	.word	0x000dbb9f

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000608:	2003      	movs	r0, #3
 800060a:	f7ff ff61 	bl	80004d0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 800060e:	bf00      	nop
 8000610:	f7ff ff72 	bl	80004f8 <LL_FLASH_GetLatency>
 8000614:	4603      	mov	r3, r0
 8000616:	2b03      	cmp	r3, #3
 8000618:	d1fa      	bne.n	8000610 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800061a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061e:	f7ff ff79 	bl	8000514 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000622:	bf00      	nop
 8000624:	f7ff ff8a 	bl	800053c <LL_PWR_IsActiveFlag_VOS>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d1fa      	bne.n	8000624 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSI_Enable();
 800062e:	f7ff fe01 	bl	8000234 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000632:	bf00      	nop
 8000634:	f7ff fe0e 	bl	8000254 <LL_RCC_HSI_IsReady>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d1fa      	bne.n	8000634 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(64);
 800063e:	2040      	movs	r0, #64	@ 0x40
 8000640:	f7ff fe1c 	bl	800027c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000644:	2300      	movs	r3, #0
 8000646:	2208      	movs	r2, #8
 8000648:	2100      	movs	r1, #0
 800064a:	2002      	movs	r0, #2
 800064c:	f7ff fec8 	bl	80003e0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000650:	f7ff fee6 	bl	8000420 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000654:	f7ff fea0 	bl	8000398 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000658:	bf00      	nop
 800065a:	f7ff fead 	bl	80003b8 <LL_RCC_PLL_IsReady>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d1fa      	bne.n	800065a <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000664:	2003      	movs	r0, #3
 8000666:	f7ff fe1f 	bl	80002a8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800066a:	bf00      	nop
 800066c:	f7ff fe30 	bl	80002d0 <LL_RCC_GetSysClkSource>
 8000670:	4603      	mov	r3, r0
 8000672:	2b0c      	cmp	r3, #12
 8000674:	d1fa      	bne.n	800066c <SystemClock_Config+0x68>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000676:	2000      	movs	r0, #0
 8000678:	f7ff fe38 	bl	80002ec <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800067c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000680:	f7ff fe48 	bl	8000314 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 8000684:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8000688:	f7ff fe58 	bl	800033c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 800068c:	4803      	ldr	r0, [pc, #12]	@ (800069c <SystemClock_Config+0x98>)
 800068e:	f000 ff89 	bl	80015a4 <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 8000692:	4802      	ldr	r0, [pc, #8]	@ (800069c <SystemClock_Config+0x98>)
 8000694:	f000 ff94 	bl	80015c0 <LL_SetSystemCoreClock>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	03d09000 	.word	0x03d09000

080006a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08e      	sub	sp, #56	@ 0x38
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
 80006b6:	615a      	str	r2, [r3, #20]
 80006b8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 80006ca:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80006ce:	f7ff fe49 	bl	8000364 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80006d2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80006d6:	f7ff fee3 	bl	80004a0 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80006da:	2002      	movs	r0, #2
 80006dc:	f7ff feb0 	bl	8000440 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80006e0:	23c0      	movs	r3, #192	@ 0xc0
 80006e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006e4:	2302      	movs	r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80006f4:	2307      	movs	r3, #7
 80006f6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4810      	ldr	r0, [pc, #64]	@ (8000740 <MX_USART1_UART_Init+0xa0>)
 80006fe:	f000 fa1f 	bl	8000b40 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000702:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000706:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000714:	230c      	movs	r3, #12
 8000716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800071c:	2300      	movs	r3, #0
 800071e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4807      	ldr	r0, [pc, #28]	@ (8000744 <MX_USART1_UART_Init+0xa4>)
 8000728:	f000 fea6 	bl	8001478 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800072c:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_USART1_UART_Init+0xa4>)
 800072e:	f7ff ff29 	bl	8000584 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000732:	4804      	ldr	r0, [pc, #16]	@ (8000744 <MX_USART1_UART_Init+0xa4>)
 8000734:	f7ff ff16 	bl	8000564 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	3738      	adds	r7, #56	@ 0x38
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	48000400 	.word	0x48000400
 8000744:	40013800 	.word	0x40013800

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800074c:	2080      	movs	r0, #128	@ 0x80
 800074e:	f7ff fe77 	bl	8000440 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff fe74 	bl	8000440 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076c:	2b80      	cmp	r3, #128	@ 0x80
 800076e:	d101      	bne.n	8000774 <LL_USART_IsActiveFlag_TXE+0x18>
 8000770:	2301      	movs	r3, #1
 8000772:	e000      	b.n	8000776 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	b29a      	uxth	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <uart_write>:
 *      Author: ronak
 */

#include "my_uart.h"

void uart_write(USART_TypeDef* ,uint8_t ch){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
	while(! LL_USART_IsActiveFlag_TXE(USART1)){
 80007b0:	bf00      	nop
 80007b2:	4807      	ldr	r0, [pc, #28]	@ (80007d0 <uart_write+0x2c>)
 80007b4:	f7ff ffd2 	bl	800075c <LL_USART_IsActiveFlag_TXE>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0f9      	beq.n	80007b2 <uart_write+0xe>

		  	}
		  LL_USART_TransmitData8(USART1, ch);
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	4619      	mov	r1, r3
 80007c2:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <uart_write+0x2c>)
 80007c4:	f7ff ffdd 	bl	8000782 <LL_USART_TransmitData8>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40013800 	.word	0x40013800

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <NMI_Handler+0x4>

080007dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <MemManage_Handler+0x4>

080007ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	@ (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000890 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800085c:	f7ff ffea 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <LoopForever+0x6>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	@ (8000898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <LoopForever+0xe>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	@ (80008a4 <LoopForever+0x16>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000886:	f000 feab 	bl	80015e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088a:	f7ff fe91 	bl	80005b0 <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000890:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 800089c:	08001690 	.word	0x08001690
  ldr r2, =_sbss
 80008a0:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80008a4:	20000128 	.word	0x20000128

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>

080008aa <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b08b      	sub	sp, #44	@ 0x2c
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	fa93 f3a3 	rbit	r3, r3
 80008c4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d101      	bne.n	80008d4 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80008d0:	2320      	movs	r3, #32
 80008d2:	e003      	b.n	80008dc <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fab3 f383 	clz	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2103      	movs	r1, #3
 80008e0:	fa01 f303 	lsl.w	r3, r1, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	401a      	ands	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	fa93 f3a3 	rbit	r3, r3
 80008f2:	61fb      	str	r3, [r7, #28]
  return result;
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80008f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d101      	bne.n	8000902 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80008fe:	2320      	movs	r3, #32
 8000900:	e003      	b.n	800090a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000904:	fab3 f383 	clz	r3, r3
 8000908:	b2db      	uxtb	r3, r3
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	6879      	ldr	r1, [r7, #4]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	431a      	orrs	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	372c      	adds	r7, #44	@ 0x2c
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	43db      	mvns	r3, r3
 8000938:	401a      	ands	r2, r3
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	fb01 f303 	mul.w	r3, r1, r3
 8000942:	431a      	orrs	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	605a      	str	r2, [r3, #4]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000954:	b480      	push	{r7}
 8000956:	b08b      	sub	sp, #44	@ 0x2c
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa93 f3a3 	rbit	r3, r3
 800096e:	613b      	str	r3, [r7, #16]
  return result;
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d101      	bne.n	800097e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800097a:	2320      	movs	r3, #32
 800097c:	e003      	b.n	8000986 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	fab3 f383 	clz	r3, r3
 8000984:	b2db      	uxtb	r3, r3
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	2103      	movs	r1, #3
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	401a      	ands	r2, r3
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	fa93 f3a3 	rbit	r3, r3
 800099c:	61fb      	str	r3, [r7, #28]
  return result;
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d101      	bne.n	80009ac <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80009a8:	2320      	movs	r3, #32
 80009aa:	e003      	b.n	80009b4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80009ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ae:	fab3 f383 	clz	r3, r3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	fa01 f303 	lsl.w	r3, r1, r3
 80009bc:	431a      	orrs	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80009c2:	bf00      	nop
 80009c4:	372c      	adds	r7, #44	@ 0x2c
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b08b      	sub	sp, #44	@ 0x2c
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	68da      	ldr	r2, [r3, #12]
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	fa93 f3a3 	rbit	r3, r3
 80009e8:	613b      	str	r3, [r7, #16]
  return result;
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80009f4:	2320      	movs	r3, #32
 80009f6:	e003      	b.n	8000a00 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fab3 f383 	clz	r3, r3
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2103      	movs	r1, #3
 8000a04:	fa01 f303 	lsl.w	r3, r1, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	fa93 f3a3 	rbit	r3, r3
 8000a16:	61fb      	str	r3, [r7, #28]
  return result;
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000a22:	2320      	movs	r3, #32
 8000a24:	e003      	b.n	8000a2e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a28:	fab3 f383 	clz	r3, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	431a      	orrs	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	60da      	str	r2, [r3, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	372c      	adds	r7, #44	@ 0x2c
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b08b      	sub	sp, #44	@ 0x2c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	6a1a      	ldr	r2, [r3, #32]
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa93 f3a3 	rbit	r3, r3
 8000a62:	613b      	str	r3, [r7, #16]
  return result;
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d101      	bne.n	8000a72 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000a6e:	2320      	movs	r3, #32
 8000a70:	e003      	b.n	8000a7a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	fab3 f383 	clz	r3, r3
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	401a      	ands	r2, r3
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
 8000a8c:	fa93 f3a3 	rbit	r3, r3
 8000a90:	61fb      	str	r3, [r7, #28]
  return result;
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d101      	bne.n	8000aa0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	e003      	b.n	8000aa8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa2:	fab3 f383 	clz	r3, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000ab6:	bf00      	nop
 8000ab8:	372c      	adds	r7, #44	@ 0x2c
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b08b      	sub	sp, #44	@ 0x2c
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa93 f3a3 	rbit	r3, r3
 8000ade:	613b      	str	r3, [r7, #16]
  return result;
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d101      	bne.n	8000aee <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000aea:	2320      	movs	r3, #32
 8000aec:	e003      	b.n	8000af6 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	fab3 f383 	clz	r3, r3
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	210f      	movs	r1, #15
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	401a      	ands	r2, r3
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	fa93 f3a3 	rbit	r3, r3
 8000b0e:	61fb      	str	r3, [r7, #28]
  return result;
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d101      	bne.n	8000b1e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000b1a:	2320      	movs	r3, #32
 8000b1c:	e003      	b.n	8000b26 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b20:	fab3 f383 	clz	r3, r3
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000b34:	bf00      	nop
 8000b36:	372c      	adds	r7, #44	@ 0x2c
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	fa93 f3a3 	rbit	r3, r3
 8000b56:	60fb      	str	r3, [r7, #12]
  return result;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <LL_GPIO_Init+0x26>
    return 32U;
 8000b62:	2320      	movs	r3, #32
 8000b64:	e003      	b.n	8000b6e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	fab3 f383 	clz	r3, r3
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000b70:	e048      	b.n	8000c04 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	2101      	movs	r1, #1
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	4013      	ands	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d03a      	beq.n	8000bfe <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d003      	beq.n	8000b98 <LL_GPIO_Init+0x58>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d10e      	bne.n	8000bb6 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	69b9      	ldr	r1, [r7, #24]
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fed7 	bl	8000954 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	6819      	ldr	r1, [r3, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff feb7 	bl	8000924 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	69b9      	ldr	r1, [r7, #24]
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff05 	bl	80009ce <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d111      	bne.n	8000bf0 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	2bff      	cmp	r3, #255	@ 0xff
 8000bd0:	d807      	bhi.n	8000be2 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	69b9      	ldr	r1, [r7, #24]
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff34 	bl	8000a48 <LL_GPIO_SetAFPin_0_7>
 8000be0:	e006      	b.n	8000bf0 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	461a      	mov	r2, r3
 8000be8:	69b9      	ldr	r1, [r7, #24]
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ff69 	bl	8000ac2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	69b9      	ldr	r1, [r7, #24]
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fe56 	bl	80008aa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3301      	adds	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1af      	bne.n	8000b72 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3720      	adds	r7, #32
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <LL_RCC_HSI_IsReady>:
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000c20:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <LL_RCC_HSI_IsReady+0x24>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c2c:	d101      	bne.n	8000c32 <LL_RCC_HSI_IsReady+0x16>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e000      	b.n	8000c34 <LL_RCC_HSI_IsReady+0x18>
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <LL_RCC_LSE_IsReady>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <LL_RCC_LSE_IsReady+0x24>)
 8000c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d101      	bne.n	8000c5a <LL_RCC_LSE_IsReady+0x16>
 8000c56:	2301      	movs	r3, #1
 8000c58:	e000      	b.n	8000c5c <LL_RCC_LSE_IsReady+0x18>
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000

08000c6c <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	2b08      	cmp	r3, #8
 8000c7a:	d101      	bne.n	8000c80 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40021000 	.word	0x40021000

08000c90 <LL_RCC_MSI_GetRange>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000c94:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <LL_RCC_MSI_GetRange+0x18>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000

08000cac <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8000cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cb6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <LL_RCC_GetSysClkSource>:
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <LL_RCC_GetSysClkSource+0x18>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <LL_RCC_GetAHBPrescaler>:
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <LL_RCC_GetAHBPrescaler+0x18>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000

08000d00 <LL_RCC_GetAPB1Prescaler>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <LL_RCC_GetAPB2Prescaler>:
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <LL_RCC_GetUSARTClockSource>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <LL_RCC_GetUSARTClockSource+0x24>)
 8000d42:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	401a      	ands	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	041b      	lsls	r3, r3, #16
 8000d4e:	4313      	orrs	r3, r2
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000

08000d60 <LL_RCC_GetUARTClockSource>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <LL_RCC_GetUARTClockSource+0x24>)
 8000d6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	401a      	ands	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	041b      	lsls	r3, r3, #16
 8000d76:	4313      	orrs	r3, r2
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	40021000 	.word	0x40021000

08000d88 <LL_RCC_PLL_GetMainSource>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <LL_RCC_PLL_GetMainSource+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	f003 0303 	and.w	r3, r3, #3
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <LL_RCC_PLL_GetN>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <LL_RCC_PLL_GetN+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <LL_RCC_PLL_GetR>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <LL_RCC_PLL_GetR+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <LL_RCC_PLL_GetDivider>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <LL_RCC_PLL_GetDivider+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000

08000df8 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d137      	bne.n	8000e7a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff94 	bl	8000d38 <LL_RCC_GetUSARTClockSource>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	f200 80b3 	bhi.w	8000f82 <LL_RCC_GetUSARTClockFreq+0x18a>
 8000e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e24 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000e63 	.word	0x08000e63
 8000e28:	08000e35 	.word	0x08000e35
 8000e2c:	08000e3d 	.word	0x08000e3d
 8000e30:	08000e4f 	.word	0x08000e4f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000e34:	f000 f956 	bl	80010e4 <RCC_GetSystemClockFreq>
 8000e38:	60f8      	str	r0, [r7, #12]
        break;
 8000e3a:	e0b3      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8000e3c:	f7ff feee 	bl	8000c1c <LL_RCC_HSI_IsReady>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 809f 	beq.w	8000f86 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8000e48:	4b59      	ldr	r3, [pc, #356]	@ (8000fb0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8000e4a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000e4c:	e09b      	b.n	8000f86 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8000e4e:	f7ff fef9 	bl	8000c44 <LL_RCC_LSE_IsReady>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 8098 	beq.w	8000f8a <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8000e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e5e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000e60:	e093      	b.n	8000f8a <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000e62:	f000 f93f 	bl	80010e4 <RCC_GetSystemClockFreq>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f9cb 	bl	8001204 <RCC_GetHCLKClockFreq>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 f9f1 	bl	8001258 <RCC_GetPCLK2ClockFreq>
 8000e76:	60f8      	str	r0, [r7, #12]
        break;
 8000e78:	e094      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0c      	cmp	r3, #12
 8000e7e:	d146      	bne.n	8000f0e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff59 	bl	8000d38 <LL_RCC_GetUSARTClockSource>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8000e8c:	2b0c      	cmp	r3, #12
 8000e8e:	d87e      	bhi.n	8000f8e <LL_RCC_GetUSARTClockFreq+0x196>
 8000e90:	a201      	add	r2, pc, #4	@ (adr r2, 8000e98 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8000e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e96:	bf00      	nop
 8000e98:	08000ef7 	.word	0x08000ef7
 8000e9c:	08000f8f 	.word	0x08000f8f
 8000ea0:	08000f8f 	.word	0x08000f8f
 8000ea4:	08000f8f 	.word	0x08000f8f
 8000ea8:	08000ecd 	.word	0x08000ecd
 8000eac:	08000f8f 	.word	0x08000f8f
 8000eb0:	08000f8f 	.word	0x08000f8f
 8000eb4:	08000f8f 	.word	0x08000f8f
 8000eb8:	08000ed5 	.word	0x08000ed5
 8000ebc:	08000f8f 	.word	0x08000f8f
 8000ec0:	08000f8f 	.word	0x08000f8f
 8000ec4:	08000f8f 	.word	0x08000f8f
 8000ec8:	08000ee5 	.word	0x08000ee5
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000ecc:	f000 f90a 	bl	80010e4 <RCC_GetSystemClockFreq>
 8000ed0:	60f8      	str	r0, [r7, #12]
        break;
 8000ed2:	e067      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8000ed4:	f7ff fea2 	bl	8000c1c <LL_RCC_HSI_IsReady>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d059      	beq.n	8000f92 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8000ede:	4b34      	ldr	r3, [pc, #208]	@ (8000fb0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8000ee0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000ee2:	e056      	b.n	8000f92 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8000ee4:	f7ff feae 	bl	8000c44 <LL_RCC_LSE_IsReady>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d053      	beq.n	8000f96 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8000eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ef2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000ef4:	e04f      	b.n	8000f96 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000ef6:	f000 f8f5 	bl	80010e4 <RCC_GetSystemClockFreq>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f981 	bl	8001204 <RCC_GetHCLKClockFreq>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f993 	bl	8001230 <RCC_GetPCLK1ClockFreq>
 8000f0a:	60f8      	str	r0, [r7, #12]
        break;
 8000f0c:	e04a      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b30      	cmp	r3, #48	@ 0x30
 8000f12:	d147      	bne.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff0f 	bl	8000d38 <LL_RCC_GetUSARTClockSource>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8000f20:	d01a      	beq.n	8000f58 <LL_RCC_GetUSARTClockFreq+0x160>
 8000f22:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8000f26:	d838      	bhi.n	8000f9a <LL_RCC_GetUSARTClockFreq+0x1a2>
 8000f28:	4a22      	ldr	r2, [pc, #136]	@ (8000fb4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00c      	beq.n	8000f48 <LL_RCC_GetUSARTClockFreq+0x150>
 8000f2e:	4a21      	ldr	r2, [pc, #132]	@ (8000fb4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d832      	bhi.n	8000f9a <LL_RCC_GetUSARTClockFreq+0x1a2>
 8000f34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8000f38:	d017      	beq.n	8000f6a <LL_RCC_GetUSARTClockFreq+0x172>
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d12c      	bne.n	8000f9a <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8000f40:	f000 f8d0 	bl	80010e4 <RCC_GetSystemClockFreq>
 8000f44:	60f8      	str	r0, [r7, #12]
          break;
 8000f46:	e02d      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8000f48:	f7ff fe68 	bl	8000c1c <LL_RCC_HSI_IsReady>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d025      	beq.n	8000f9e <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 8000f52:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8000f54:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000f56:	e022      	b.n	8000f9e <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8000f58:	f7ff fe74 	bl	8000c44 <LL_RCC_LSE_IsReady>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d01f      	beq.n	8000fa2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8000f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f66:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000f68:	e01b      	b.n	8000fa2 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000f6a:	f000 f8bb 	bl	80010e4 <RCC_GetSystemClockFreq>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f947 	bl	8001204 <RCC_GetHCLKClockFreq>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f959 	bl	8001230 <RCC_GetPCLK1ClockFreq>
 8000f7e:	60f8      	str	r0, [r7, #12]
          break;
 8000f80:	e010      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8000f82:	bf00      	nop
 8000f84:	e00e      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8000f86:	bf00      	nop
 8000f88:	e00c      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8000f8a:	bf00      	nop
 8000f8c:	e00a      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8000f8e:	bf00      	nop
 8000f90:	e008      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8000f92:	bf00      	nop
 8000f94:	e006      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8000f96:	bf00      	nop
 8000f98:	e004      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8000f9a:	bf00      	nop
 8000f9c:	e002      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8000f9e:	bf00      	nop
 8000fa0:	e000      	b.n	8000fa4 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8000fa2:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	00f42400 	.word	0x00f42400
 8000fb4:	00300020 	.word	0x00300020
 8000fb8:	00300010 	.word	0x00300010

08000fbc <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2bc0      	cmp	r3, #192	@ 0xc0
 8000fcc:	d13b      	bne.n	8001046 <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fec6 	bl	8000d60 <LL_RCC_GetUARTClockSource>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8000fda:	d01a      	beq.n	8001012 <LL_RCC_GetUARTClockFreq+0x56>
 8000fdc:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8000fe0:	d82c      	bhi.n	800103c <LL_RCC_GetUARTClockFreq+0x80>
 8000fe2:	4a3b      	ldr	r2, [pc, #236]	@ (80010d0 <LL_RCC_GetUARTClockFreq+0x114>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d00c      	beq.n	8001002 <LL_RCC_GetUARTClockFreq+0x46>
 8000fe8:	4a39      	ldr	r2, [pc, #228]	@ (80010d0 <LL_RCC_GetUARTClockFreq+0x114>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d826      	bhi.n	800103c <LL_RCC_GetUARTClockFreq+0x80>
 8000fee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8000ff2:	d017      	beq.n	8001024 <LL_RCC_GetUARTClockFreq+0x68>
 8000ff4:	4a37      	ldr	r2, [pc, #220]	@ (80010d4 <LL_RCC_GetUARTClockFreq+0x118>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d120      	bne.n	800103c <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8000ffa:	f000 f873 	bl	80010e4 <RCC_GetSystemClockFreq>
 8000ffe:	60f8      	str	r0, [r7, #12]
        break;
 8001000:	e021      	b.n	8001046 <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001002:	f7ff fe0b 	bl	8000c1c <LL_RCC_HSI_IsReady>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d019      	beq.n	8001040 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 800100c:	4b32      	ldr	r3, [pc, #200]	@ (80010d8 <LL_RCC_GetUARTClockFreq+0x11c>)
 800100e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001010:	e016      	b.n	8001040 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001012:	f7ff fe17 	bl	8000c44 <LL_RCC_LSE_IsReady>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d013      	beq.n	8001044 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 800101c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001020:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001022:	e00f      	b.n	8001044 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001024:	f000 f85e 	bl	80010e4 <RCC_GetSystemClockFreq>
 8001028:	4603      	mov	r3, r0
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f8ea 	bl	8001204 <RCC_GetHCLKClockFreq>
 8001030:	4603      	mov	r3, r0
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f8fc 	bl	8001230 <RCC_GetPCLK1ClockFreq>
 8001038:	60f8      	str	r0, [r7, #12]
        break;
 800103a:	e004      	b.n	8001046 <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 800103c:	bf00      	nop
 800103e:	e002      	b.n	8001046 <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8001040:	bf00      	nop
 8001042:	e000      	b.n	8001046 <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8001044:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800104c:	d13b      	bne.n	80010c6 <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fe86 	bl	8000d60 <LL_RCC_GetUARTClockSource>
 8001054:	4603      	mov	r3, r0
 8001056:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800105a:	d01a      	beq.n	8001092 <LL_RCC_GetUARTClockFreq+0xd6>
 800105c:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8001060:	d82c      	bhi.n	80010bc <LL_RCC_GetUARTClockFreq+0x100>
 8001062:	4a1e      	ldr	r2, [pc, #120]	@ (80010dc <LL_RCC_GetUARTClockFreq+0x120>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d00c      	beq.n	8001082 <LL_RCC_GetUARTClockFreq+0xc6>
 8001068:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <LL_RCC_GetUARTClockFreq+0x120>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d826      	bhi.n	80010bc <LL_RCC_GetUARTClockFreq+0x100>
 800106e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001072:	d017      	beq.n	80010a4 <LL_RCC_GetUARTClockFreq+0xe8>
 8001074:	4a1a      	ldr	r2, [pc, #104]	@ (80010e0 <LL_RCC_GetUARTClockFreq+0x124>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d120      	bne.n	80010bc <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800107a:	f000 f833 	bl	80010e4 <RCC_GetSystemClockFreq>
 800107e:	60f8      	str	r0, [r7, #12]
        break;
 8001080:	e021      	b.n	80010c6 <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001082:	f7ff fdcb 	bl	8000c1c <LL_RCC_HSI_IsReady>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d019      	beq.n	80010c0 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <LL_RCC_GetUARTClockFreq+0x11c>)
 800108e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001090:	e016      	b.n	80010c0 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001092:	f7ff fdd7 	bl	8000c44 <LL_RCC_LSE_IsReady>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d013      	beq.n	80010c4 <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 800109c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010a0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80010a2:	e00f      	b.n	80010c4 <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80010a4:	f000 f81e 	bl	80010e4 <RCC_GetSystemClockFreq>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f8aa 	bl	8001204 <RCC_GetHCLKClockFreq>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f8bc 	bl	8001230 <RCC_GetPCLK1ClockFreq>
 80010b8:	60f8      	str	r0, [r7, #12]
        break;
 80010ba:	e004      	b.n	80010c6 <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 80010bc:	bf00      	nop
 80010be:	e002      	b.n	80010c6 <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 80010c0:	bf00      	nop
 80010c2:	e000      	b.n	80010c6 <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 80010c4:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	00c00080 	.word	0x00c00080
 80010d4:	00c00040 	.word	0x00c00040
 80010d8:	00f42400 	.word	0x00f42400
 80010dc:	03000200 	.word	0x03000200
 80010e0:	03000100 	.word	0x03000100

080010e4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80010ea:	f7ff fded 	bl	8000cc8 <LL_RCC_GetSysClkSource>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b0c      	cmp	r3, #12
 80010f2:	d851      	bhi.n	8001198 <RCC_GetSystemClockFreq+0xb4>
 80010f4:	a201      	add	r2, pc, #4	@ (adr r2, 80010fc <RCC_GetSystemClockFreq+0x18>)
 80010f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fa:	bf00      	nop
 80010fc:	08001131 	.word	0x08001131
 8001100:	08001199 	.word	0x08001199
 8001104:	08001199 	.word	0x08001199
 8001108:	08001199 	.word	0x08001199
 800110c:	08001185 	.word	0x08001185
 8001110:	08001199 	.word	0x08001199
 8001114:	08001199 	.word	0x08001199
 8001118:	08001199 	.word	0x08001199
 800111c:	0800118b 	.word	0x0800118b
 8001120:	08001199 	.word	0x08001199
 8001124:	08001199 	.word	0x08001199
 8001128:	08001199 	.word	0x08001199
 800112c:	08001191 	.word	0x08001191
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001130:	f7ff fd9c 	bl	8000c6c <LL_RCC_MSI_IsEnabledRangeSelect>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d111      	bne.n	800115e <RCC_GetSystemClockFreq+0x7a>
 800113a:	f7ff fd97 	bl	8000c6c <LL_RCC_MSI_IsEnabledRangeSelect>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <RCC_GetSystemClockFreq+0x6a>
 8001144:	f7ff fda4 	bl	8000c90 <LL_RCC_MSI_GetRange>
 8001148:	4603      	mov	r3, r0
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	e003      	b.n	8001156 <RCC_GetSystemClockFreq+0x72>
 800114e:	f7ff fdad 	bl	8000cac <LL_RCC_MSI_GetRangeAfterStandby>
 8001152:	4603      	mov	r3, r0
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	4a28      	ldr	r2, [pc, #160]	@ (80011f8 <RCC_GetSystemClockFreq+0x114>)
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	e010      	b.n	8001180 <RCC_GetSystemClockFreq+0x9c>
 800115e:	f7ff fd85 	bl	8000c6c <LL_RCC_MSI_IsEnabledRangeSelect>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <RCC_GetSystemClockFreq+0x8e>
 8001168:	f7ff fd92 	bl	8000c90 <LL_RCC_MSI_GetRange>
 800116c:	4603      	mov	r3, r0
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	e003      	b.n	800117a <RCC_GetSystemClockFreq+0x96>
 8001172:	f7ff fd9b 	bl	8000cac <LL_RCC_MSI_GetRangeAfterStandby>
 8001176:	4603      	mov	r3, r0
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	4a1f      	ldr	r2, [pc, #124]	@ (80011f8 <RCC_GetSystemClockFreq+0x114>)
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001182:	e033      	b.n	80011ec <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001184:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <RCC_GetSystemClockFreq+0x118>)
 8001186:	607b      	str	r3, [r7, #4]
      break;
 8001188:	e030      	b.n	80011ec <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <RCC_GetSystemClockFreq+0x11c>)
 800118c:	607b      	str	r3, [r7, #4]
      break;
 800118e:	e02d      	b.n	80011ec <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001190:	f000 f876 	bl	8001280 <RCC_PLL_GetFreqDomain_SYS>
 8001194:	6078      	str	r0, [r7, #4]
      break;
 8001196:	e029      	b.n	80011ec <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001198:	f7ff fd68 	bl	8000c6c <LL_RCC_MSI_IsEnabledRangeSelect>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d111      	bne.n	80011c6 <RCC_GetSystemClockFreq+0xe2>
 80011a2:	f7ff fd63 	bl	8000c6c <LL_RCC_MSI_IsEnabledRangeSelect>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d004      	beq.n	80011b6 <RCC_GetSystemClockFreq+0xd2>
 80011ac:	f7ff fd70 	bl	8000c90 <LL_RCC_MSI_GetRange>
 80011b0:	4603      	mov	r3, r0
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	e003      	b.n	80011be <RCC_GetSystemClockFreq+0xda>
 80011b6:	f7ff fd79 	bl	8000cac <LL_RCC_MSI_GetRangeAfterStandby>
 80011ba:	4603      	mov	r3, r0
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	4a0e      	ldr	r2, [pc, #56]	@ (80011f8 <RCC_GetSystemClockFreq+0x114>)
 80011c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c4:	e010      	b.n	80011e8 <RCC_GetSystemClockFreq+0x104>
 80011c6:	f7ff fd51 	bl	8000c6c <LL_RCC_MSI_IsEnabledRangeSelect>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d004      	beq.n	80011da <RCC_GetSystemClockFreq+0xf6>
 80011d0:	f7ff fd5e 	bl	8000c90 <LL_RCC_MSI_GetRange>
 80011d4:	4603      	mov	r3, r0
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	e003      	b.n	80011e2 <RCC_GetSystemClockFreq+0xfe>
 80011da:	f7ff fd67 	bl	8000cac <LL_RCC_MSI_GetRangeAfterStandby>
 80011de:	4603      	mov	r3, r0
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <RCC_GetSystemClockFreq+0x114>)
 80011e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80011ea:	bf00      	nop
  }

  return frequency;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	08001658 	.word	0x08001658
 80011fc:	00f42400 	.word	0x00f42400
 8001200:	007a1200 	.word	0x007a1200

08001204 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800120c:	f7ff fd6a 	bl	8000ce4 <LL_RCC_GetAHBPrescaler>
 8001210:	4603      	mov	r3, r0
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	4a04      	ldr	r2, [pc, #16]	@ (800122c <RCC_GetHCLKClockFreq+0x28>)
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	461a      	mov	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	40d3      	lsrs	r3, r2
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	08001640 	.word	0x08001640

08001230 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001238:	f7ff fd62 	bl	8000d00 <LL_RCC_GetAPB1Prescaler>
 800123c:	4603      	mov	r3, r0
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <RCC_GetPCLK1ClockFreq+0x24>)
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	40d3      	lsrs	r3, r2
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	08001650 	.word	0x08001650

08001258 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001260:	f7ff fd5c 	bl	8000d1c <LL_RCC_GetAPB2Prescaler>
 8001264:	4603      	mov	r3, r0
 8001266:	0adb      	lsrs	r3, r3, #11
 8001268:	4a04      	ldr	r2, [pc, #16]	@ (800127c <RCC_GetPCLK2ClockFreq+0x24>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	461a      	mov	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	40d3      	lsrs	r3, r2
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	08001650 	.word	0x08001650

08001280 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001286:	f7ff fd7f 	bl	8000d88 <LL_RCC_PLL_GetMainSource>
 800128a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d036      	beq.n	8001300 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d836      	bhi.n	8001306 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d003      	beq.n	80012a6 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d02a      	beq.n	80012fa <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80012a4:	e02f      	b.n	8001306 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80012a6:	f7ff fce1 	bl	8000c6c <LL_RCC_MSI_IsEnabledRangeSelect>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d111      	bne.n	80012d4 <RCC_PLL_GetFreqDomain_SYS+0x54>
 80012b0:	f7ff fcdc 	bl	8000c6c <LL_RCC_MSI_IsEnabledRangeSelect>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <RCC_PLL_GetFreqDomain_SYS+0x44>
 80012ba:	f7ff fce9 	bl	8000c90 <LL_RCC_MSI_GetRange>
 80012be:	4603      	mov	r3, r0
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	e003      	b.n	80012cc <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80012c4:	f7ff fcf2 	bl	8000cac <LL_RCC_MSI_GetRangeAfterStandby>
 80012c8:	4603      	mov	r3, r0
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	4a2f      	ldr	r2, [pc, #188]	@ (800138c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	e010      	b.n	80012f6 <RCC_PLL_GetFreqDomain_SYS+0x76>
 80012d4:	f7ff fcca 	bl	8000c6c <LL_RCC_MSI_IsEnabledRangeSelect>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d004      	beq.n	80012e8 <RCC_PLL_GetFreqDomain_SYS+0x68>
 80012de:	f7ff fcd7 	bl	8000c90 <LL_RCC_MSI_GetRange>
 80012e2:	4603      	mov	r3, r0
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	e003      	b.n	80012f0 <RCC_PLL_GetFreqDomain_SYS+0x70>
 80012e8:	f7ff fce0 	bl	8000cac <LL_RCC_MSI_GetRangeAfterStandby>
 80012ec:	4603      	mov	r3, r0
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	4a26      	ldr	r2, [pc, #152]	@ (800138c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80012f8:	e02f      	b.n	800135a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80012fa:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80012fc:	607b      	str	r3, [r7, #4]
      break;
 80012fe:	e02c      	b.n	800135a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001300:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8001302:	607b      	str	r3, [r7, #4]
      break;
 8001304:	e029      	b.n	800135a <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001306:	f7ff fcb1 	bl	8000c6c <LL_RCC_MSI_IsEnabledRangeSelect>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d111      	bne.n	8001334 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8001310:	f7ff fcac 	bl	8000c6c <LL_RCC_MSI_IsEnabledRangeSelect>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800131a:	f7ff fcb9 	bl	8000c90 <LL_RCC_MSI_GetRange>
 800131e:	4603      	mov	r3, r0
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	e003      	b.n	800132c <RCC_PLL_GetFreqDomain_SYS+0xac>
 8001324:	f7ff fcc2 	bl	8000cac <LL_RCC_MSI_GetRangeAfterStandby>
 8001328:	4603      	mov	r3, r0
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	4a17      	ldr	r2, [pc, #92]	@ (800138c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	e010      	b.n	8001356 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8001334:	f7ff fc9a 	bl	8000c6c <LL_RCC_MSI_IsEnabledRangeSelect>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d004      	beq.n	8001348 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800133e:	f7ff fca7 	bl	8000c90 <LL_RCC_MSI_GetRange>
 8001342:	4603      	mov	r3, r0
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	e003      	b.n	8001350 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8001348:	f7ff fcb0 	bl	8000cac <LL_RCC_MSI_GetRangeAfterStandby>
 800134c:	4603      	mov	r3, r0
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001358:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800135a:	f7ff fd3f 	bl	8000ddc <LL_RCC_PLL_GetDivider>
 800135e:	4603      	mov	r3, r0
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	3301      	adds	r3, #1
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	fbb2 f4f3 	udiv	r4, r2, r3
 800136a:	f7ff fd1b 	bl	8000da4 <LL_RCC_PLL_GetN>
 800136e:	4603      	mov	r3, r0
 8001370:	fb03 f404 	mul.w	r4, r3, r4
 8001374:	f7ff fd24 	bl	8000dc0 <LL_RCC_PLL_GetR>
 8001378:	4603      	mov	r3, r0
 800137a:	0e5b      	lsrs	r3, r3, #25
 800137c:	3301      	adds	r3, #1
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	08001658 	.word	0x08001658
 8001390:	00f42400 	.word	0x00f42400
 8001394:	007a1200 	.word	0x007a1200

08001398 <LL_USART_IsEnabled>:
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <LL_USART_IsEnabled+0x18>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <LL_USART_IsEnabled+0x1a>
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_USART_SetStopBitsLength>:
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	605a      	str	r2, [r3, #4]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_USART_SetHWFlowCtrl>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	609a      	str	r2, [r3, #8]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <LL_USART_SetBaudRate>:
{
 800140a:	b480      	push	{r7}
 800140c:	b087      	sub	sp, #28
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800141e:	d11a      	bne.n	8001456 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	005a      	lsls	r2, r3, #1
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	085b      	lsrs	r3, r3, #1
 8001428:	441a      	add	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	b29b      	uxth	r3, r3
 8001432:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	085b      	lsrs	r3, r3, #1
 8001442:	b29b      	uxth	r3, r3
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	60da      	str	r2, [r3, #12]
}
 8001454:	e00a      	b.n	800146c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	085a      	lsrs	r2, r3, #1
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	441a      	add	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	fbb2 f3f3 	udiv	r3, r2, r3
 8001464:	b29b      	uxth	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	60da      	str	r2, [r3, #12]
}
 800146c:	bf00      	nop
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ff84 	bl	8001398 <LL_USART_IsEnabled>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d15b      	bne.n	800154e <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b2f      	ldr	r3, [pc, #188]	@ (8001558 <LL_USART_Init+0xe0>)
 800149c:	4013      	ands	r3, r2
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	6851      	ldr	r1, [r2, #4]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	68d2      	ldr	r2, [r2, #12]
 80014a6:	4311      	orrs	r1, r2
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	6912      	ldr	r2, [r2, #16]
 80014ac:	4311      	orrs	r1, r2
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	6992      	ldr	r2, [r2, #24]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4619      	mov	r1, r3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff7c 	bl	80013be <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	4619      	mov	r1, r3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff89 	bl	80013e4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a21      	ldr	r2, [pc, #132]	@ (800155c <LL_USART_Init+0xe4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d104      	bne.n	80014e4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80014da:	2003      	movs	r0, #3
 80014dc:	f7ff fc8c 	bl	8000df8 <LL_RCC_GetUSARTClockFreq>
 80014e0:	60b8      	str	r0, [r7, #8]
 80014e2:	e023      	b.n	800152c <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001560 <LL_USART_Init+0xe8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d104      	bne.n	80014f6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80014ec:	200c      	movs	r0, #12
 80014ee:	f7ff fc83 	bl	8000df8 <LL_RCC_GetUSARTClockFreq>
 80014f2:	60b8      	str	r0, [r7, #8]
 80014f4:	e01a      	b.n	800152c <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001564 <LL_USART_Init+0xec>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d104      	bne.n	8001508 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80014fe:	2030      	movs	r0, #48	@ 0x30
 8001500:	f7ff fc7a 	bl	8000df8 <LL_RCC_GetUSARTClockFreq>
 8001504:	60b8      	str	r0, [r7, #8]
 8001506:	e011      	b.n	800152c <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a17      	ldr	r2, [pc, #92]	@ (8001568 <LL_USART_Init+0xf0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d104      	bne.n	800151a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8001510:	20c0      	movs	r0, #192	@ 0xc0
 8001512:	f7ff fd53 	bl	8000fbc <LL_RCC_GetUARTClockFreq>
 8001516:	60b8      	str	r0, [r7, #8]
 8001518:	e008      	b.n	800152c <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a13      	ldr	r2, [pc, #76]	@ (800156c <LL_USART_Init+0xf4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d104      	bne.n	800152c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8001522:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8001526:	f7ff fd49 	bl	8000fbc <LL_RCC_GetUARTClockFreq>
 800152a:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00d      	beq.n	800154e <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff5e 	bl	800140a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	efff69f3 	.word	0xefff69f3
 800155c:	40013800 	.word	0x40013800
 8001560:	40004400 	.word	0x40004400
 8001564:	40004800 	.word	0x40004800
 8001568:	40004c00 	.word	0x40004c00
 800156c:	40005000 	.word	0x40005000

08001570 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <LL_InitTick+0x30>)
 8001584:	3b01      	subs	r3, #1
 8001586:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <LL_InitTick+0x30>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <LL_InitTick+0x30>)
 8001590:	2205      	movs	r2, #5
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80015ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ffdd 	bl	8001570 <LL_InitTick>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80015c8:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <LL_SetSystemCoreClock+0x1c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000108 	.word	0x20000108

080015e0 <__libc_init_array>:
 80015e0:	b570      	push	{r4, r5, r6, lr}
 80015e2:	4d0d      	ldr	r5, [pc, #52]	@ (8001618 <__libc_init_array+0x38>)
 80015e4:	4c0d      	ldr	r4, [pc, #52]	@ (800161c <__libc_init_array+0x3c>)
 80015e6:	1b64      	subs	r4, r4, r5
 80015e8:	10a4      	asrs	r4, r4, #2
 80015ea:	2600      	movs	r6, #0
 80015ec:	42a6      	cmp	r6, r4
 80015ee:	d109      	bne.n	8001604 <__libc_init_array+0x24>
 80015f0:	4d0b      	ldr	r5, [pc, #44]	@ (8001620 <__libc_init_array+0x40>)
 80015f2:	4c0c      	ldr	r4, [pc, #48]	@ (8001624 <__libc_init_array+0x44>)
 80015f4:	f000 f818 	bl	8001628 <_init>
 80015f8:	1b64      	subs	r4, r4, r5
 80015fa:	10a4      	asrs	r4, r4, #2
 80015fc:	2600      	movs	r6, #0
 80015fe:	42a6      	cmp	r6, r4
 8001600:	d105      	bne.n	800160e <__libc_init_array+0x2e>
 8001602:	bd70      	pop	{r4, r5, r6, pc}
 8001604:	f855 3b04 	ldr.w	r3, [r5], #4
 8001608:	4798      	blx	r3
 800160a:	3601      	adds	r6, #1
 800160c:	e7ee      	b.n	80015ec <__libc_init_array+0xc>
 800160e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001612:	4798      	blx	r3
 8001614:	3601      	adds	r6, #1
 8001616:	e7f2      	b.n	80015fe <__libc_init_array+0x1e>
 8001618:	08001688 	.word	0x08001688
 800161c:	08001688 	.word	0x08001688
 8001620:	08001688 	.word	0x08001688
 8001624:	0800168c 	.word	0x0800168c

08001628 <_init>:
 8001628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162a:	bf00      	nop
 800162c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162e:	bc08      	pop	{r3}
 8001630:	469e      	mov	lr, r3
 8001632:	4770      	bx	lr

08001634 <_fini>:
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001636:	bf00      	nop
 8001638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800163a:	bc08      	pop	{r3}
 800163c:	469e      	mov	lr, r3
 800163e:	4770      	bx	lr
