
LL_USART_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a14  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001bc0  08001bc0  00002bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c4c  08001c4c  0000310c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c4c  08001c4c  0000310c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c4c  08001c4c  0000310c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c4c  08001c4c  00002c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c50  08001c50  00002c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08001c54  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000010c  08001d60  0000310c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08001d60  00003128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061c8  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012a0  00000000  00000000  00009304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0000a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000650  00000000  00000000  0000ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c72  00000000  00000000  0000b470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006939  00000000  00000000  0002f0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c49ec  00000000  00000000  00035a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa407  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002240  00000000  00000000  000fa44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000fc68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000010c 	.word	0x2000010c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001ba8 	.word	0x08001ba8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000110 	.word	0x20000110
 80001e8:	08001ba8 	.word	0x08001ba8

080001ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f003 0307 	and.w	r3, r3, #7
 80001fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <__NVIC_SetPriorityGrouping+0x44>)
 80001fe:	68db      	ldr	r3, [r3, #12]
 8000200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000202:	68ba      	ldr	r2, [r7, #8]
 8000204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000208:	4013      	ands	r3, r2
 800020a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800021c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800021e:	4a04      	ldr	r2, [pc, #16]	@ (8000230 <__NVIC_SetPriorityGrouping+0x44>)
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	60d3      	str	r3, [r2, #12]
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000238:	4b05      	ldr	r3, [pc, #20]	@ (8000250 <LL_RCC_HSI_Enable+0x1c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a04      	ldr	r2, [pc, #16]	@ (8000250 <LL_RCC_HSI_Enable+0x1c>)
 800023e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40021000 	.word	0x40021000

08000254 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000258:	4b07      	ldr	r3, [pc, #28]	@ (8000278 <LL_RCC_HSI_IsReady+0x24>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000264:	d101      	bne.n	800026a <LL_RCC_HSI_IsReady+0x16>
 8000266:	2301      	movs	r3, #1
 8000268:	e000      	b.n	800026c <LL_RCC_HSI_IsReady+0x18>
 800026a:	2300      	movs	r3, #0
}
 800026c:	4618      	mov	r0, r3
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000

0800027c <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000284:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	061b      	lsls	r3, r3, #24
 8000290:	4904      	ldr	r1, [pc, #16]	@ (80002a4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000292:	4313      	orrs	r3, r2
 8000294:	604b      	str	r3, [r1, #4]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000

080002a8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80002b0:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <LL_RCC_SetSysClkSource+0x24>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	f023 0203 	bic.w	r2, r3, #3
 80002b8:	4904      	ldr	r1, [pc, #16]	@ (80002cc <LL_RCC_SetSysClkSource+0x24>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4313      	orrs	r3, r2
 80002be:	608b      	str	r3, [r1, #8]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000

080002d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <LL_RCC_GetSysClkSource+0x18>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	f003 030c 	and.w	r3, r3, #12
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000

080002ec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <LL_RCC_SetAHBPrescaler+0x24>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80002fc:	4904      	ldr	r1, [pc, #16]	@ (8000310 <LL_RCC_SetAHBPrescaler+0x24>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4313      	orrs	r3, r2
 8000302:	608b      	str	r3, [r1, #8]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	40021000 	.word	0x40021000

08000314 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800031c:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <LL_RCC_SetAPB1Prescaler+0x24>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000324:	4904      	ldr	r1, [pc, #16]	@ (8000338 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4313      	orrs	r3, r2
 800032a:	608b      	str	r3, [r1, #8]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000

0800033c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800034c:	4904      	ldr	r1, [pc, #16]	@ (8000360 <LL_RCC_SetAPB2Prescaler+0x24>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4313      	orrs	r3, r2
 8000352:	608b      	str	r3, [r1, #8]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000

08000364 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800036c:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <LL_RCC_SetUSARTClockSource+0x30>)
 800036e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	0c1b      	lsrs	r3, r3, #16
 8000376:	43db      	mvns	r3, r3
 8000378:	401a      	ands	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	b29b      	uxth	r3, r3
 800037e:	4905      	ldr	r1, [pc, #20]	@ (8000394 <LL_RCC_SetUSARTClockSource+0x30>)
 8000380:	4313      	orrs	r3, r2
 8000382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800039c:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <LL_RCC_PLL_Enable+0x1c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a04      	ldr	r2, [pc, #16]	@ (80003b4 <LL_RCC_PLL_Enable+0x1c>)
 80003a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003a6:	6013      	str	r3, [r2, #0]
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000

080003b8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80003bc:	4b07      	ldr	r3, [pc, #28]	@ (80003dc <LL_RCC_PLL_IsReady+0x24>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80003c8:	d101      	bne.n	80003ce <LL_RCC_PLL_IsReady+0x16>
 80003ca:	2301      	movs	r3, #1
 80003cc:	e000      	b.n	80003d0 <LL_RCC_PLL_IsReady+0x18>
 80003ce:	2300      	movs	r3, #0
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
 80003ec:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80003ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000418 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80003f0:	68da      	ldr	r2, [r3, #12]
 80003f2:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80003f4:	4013      	ands	r3, r2
 80003f6:	68f9      	ldr	r1, [r7, #12]
 80003f8:	68ba      	ldr	r2, [r7, #8]
 80003fa:	4311      	orrs	r1, r2
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	0212      	lsls	r2, r2, #8
 8000400:	4311      	orrs	r1, r2
 8000402:	683a      	ldr	r2, [r7, #0]
 8000404:	430a      	orrs	r2, r1
 8000406:	4904      	ldr	r1, [pc, #16]	@ (8000418 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000408:	4313      	orrs	r3, r2
 800040a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000
 800041c:	f9ff808c 	.word	0xf9ff808c

08000420 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000424:	4b05      	ldr	r3, [pc, #20]	@ (800043c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	4a04      	ldr	r2, [pc, #16]	@ (800043c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800042a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800042e:	60d3      	str	r3, [r2, #12]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000

08000440 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000448:	4b08      	ldr	r3, [pc, #32]	@ (800046c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800044a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800044c:	4907      	ldr	r1, [pc, #28]	@ (800046c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4313      	orrs	r3, r2
 8000452:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000454:	4b05      	ldr	r3, [pc, #20]	@ (800046c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4013      	ands	r3, r2
 800045c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000

08000470 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <LL_APB1_GRP1_EnableClock+0x2c>)
 800047a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800047c:	4907      	ldr	r1, [pc, #28]	@ (800049c <LL_APB1_GRP1_EnableClock+0x2c>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000484:	4b05      	ldr	r3, [pc, #20]	@ (800049c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000486:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4013      	ands	r3, r2
 800048c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800048e:	68fb      	ldr	r3, [r7, #12]
}
 8000490:	bf00      	nop
 8000492:	3714      	adds	r7, #20
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000

080004a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004a8:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80004ac:	4907      	ldr	r1, [pc, #28]	@ (80004cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004b4:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4013      	ands	r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004be:	68fb      	ldr	r3, [r7, #12]
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <LL_FLASH_SetLatency+0x24>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f023 0207 	bic.w	r2, r3, #7
 80004e0:	4904      	ldr	r1, [pc, #16]	@ (80004f4 <LL_FLASH_SetLatency+0x24>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	600b      	str	r3, [r1, #0]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40022000 	.word	0x40022000

080004f8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004fc:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <LL_FLASH_GetLatency+0x18>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f003 0307 	and.w	r3, r3, #7
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40022000 	.word	0x40022000

08000514 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000524:	4904      	ldr	r1, [pc, #16]	@ (8000538 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	600b      	str	r3, [r1, #0]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40007000 	.word	0x40007000

0800053c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000540:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800054c:	d101      	bne.n	8000552 <LL_PWR_IsActiveFlag_VOS+0x16>
 800054e:	2301      	movs	r3, #1
 8000550:	e000      	b.n	8000554 <LL_PWR_IsActiveFlag_VOS+0x18>
 8000552:	2300      	movs	r3, #0
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40007000 	.word	0x40007000

08000564 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	601a      	str	r2, [r3, #0]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f043 0201 	orr.w	r2, r3, #1
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	601a      	str	r2, [r3, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	609a      	str	r2, [r3, #8]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b08b      	sub	sp, #44	@ 0x2c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	fa93 f3a3 	rbit	r3, r3
 80005ea:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80005f6:	2320      	movs	r3, #32
 80005f8:	e003      	b.n	8000602 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	fab3 f383 	clz	r3, r3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	2103      	movs	r1, #3
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	401a      	ands	r2, r3
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	fa93 f3a3 	rbit	r3, r3
 8000618:	61fb      	str	r3, [r7, #28]
  return result;
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800061e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000624:	2320      	movs	r3, #32
 8000626:	e003      	b.n	8000630 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800062a:	fab3 f383 	clz	r3, r3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
 8000638:	431a      	orrs	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	601a      	str	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	372c      	adds	r7, #44	@ 0x2c
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	691a      	ldr	r2, [r3, #16]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	4013      	ands	r3, r2
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	429a      	cmp	r2, r3
 8000660:	d101      	bne.n	8000666 <LL_GPIO_IsInputPinSet+0x1c>
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <LL_GPIO_IsInputPinSet+0x1e>
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b5b0      	push	{r4, r5, r7, lr}
 8000676:	b08e      	sub	sp, #56	@ 0x38
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800067a:	2001      	movs	r0, #1
 800067c:	f7ff ff10 	bl	80004a0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000680:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000684:	f7ff fef4 	bl	8000470 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000688:	2003      	movs	r0, #3
 800068a:	f7ff fdaf 	bl	80001ec <__NVIC_SetPriorityGrouping>

  /* USER CODE BEGIN Init */
  MY_TIMER_Init();
 800068e:	f000 fa1b 	bl	8000ac8 <MY_TIMER_Init>
  /* Enable clock for GPIOC first*/
  	LL_AHB2_GRP1_EnableClock (LL_AHB2_GRP1_PERIPH_GPIOC);
 8000692:	2004      	movs	r0, #4
 8000694:	f7ff fed4 	bl	8000440 <LL_AHB2_GRP1_EnableClock>


  	/* Now declare pin PC7 as output pin*/
  	LL_GPIO_SetPinMode (GPIOC,LL_GPIO_PIN_7 , LL_GPIO_MODE_OUTPUT);
 8000698:	2201      	movs	r2, #1
 800069a:	2180      	movs	r1, #128	@ 0x80
 800069c:	4825      	ldr	r0, [pc, #148]	@ (8000734 <main+0xc0>)
 800069e:	f7ff ff97 	bl	80005d0 <LL_GPIO_SetPinMode>

  	/* Set PC13 as input pin */
  	LL_GPIO_SetPinMode (GPIOC,LL_GPIO_PIN_13 , LL_GPIO_MODE_INPUT);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a8:	4822      	ldr	r0, [pc, #136]	@ (8000734 <main+0xc0>)
 80006aa:	f7ff ff91 	bl	80005d0 <LL_GPIO_SetPinMode>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f849 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f000 f911 	bl	80008d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006b6:	f000 f8bb 	bl	8000830 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80006ba:	f000 f891 	bl	80007e0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
//  strcpy((char*)buf,"Application is Running\r\n");
  char buf[50] = "Application is running\r\n";
 80006be:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <main+0xc4>)
 80006c0:	1d3c      	adds	r4, r7, #4
 80006c2:	461d      	mov	r5, r3
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006cc:	c403      	stmia	r4!, {r0, r1}
 80006ce:	7022      	strb	r2, [r4, #0]
 80006d0:	f107 031d 	add.w	r3, r7, #29
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]
 80006e2:	761a      	strb	r2, [r3, #24]
  uart_write(dev->handle,buf);
 80006e4:	4b15      	ldr	r3, [pc, #84]	@ (800073c <main+0xc8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1d3a      	adds	r2, r7, #4
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f932 	bl	8000958 <uart_write>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13)){
 80006f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f8:	480e      	ldr	r0, [pc, #56]	@ (8000734 <main+0xc0>)
 80006fa:	f7ff ffa6 	bl	800064a <LL_GPIO_IsInputPinSet>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0f7      	beq.n	80006f4 <main+0x80>
		  MY_Delay(10000);
 8000704:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000708:	f000 fa3c 	bl	8000b84 <MY_Delay>
		  strcpy((char*)buf,"In the loop\r\n");
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4a0c      	ldr	r2, [pc, #48]	@ (8000740 <main+0xcc>)
 8000710:	461c      	mov	r4, r3
 8000712:	4613      	mov	r3, r2
 8000714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000716:	c407      	stmia	r4!, {r0, r1, r2}
 8000718:	8023      	strh	r3, [r4, #0]
		   uart_write(dev->handle,buf);
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <main+0xc8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	1d3a      	adds	r2, r7, #4
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f917 	bl	8000958 <uart_write>
		   MY_Delay(1000);
 800072a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800072e:	f000 fa29 	bl	8000b84 <MY_Delay>
	  if(LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13)){
 8000732:	e7df      	b.n	80006f4 <main+0x80>
 8000734:	48000800 	.word	0x48000800
 8000738:	08001bd0 	.word	0x08001bd0
 800073c:	20000104 	.word	0x20000104
 8000740:	08001bc0 	.word	0x08001bc0

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000748:	2003      	movs	r0, #3
 800074a:	f7ff fec1 	bl	80004d0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 800074e:	bf00      	nop
 8000750:	f7ff fed2 	bl	80004f8 <LL_FLASH_GetLatency>
 8000754:	4603      	mov	r3, r0
 8000756:	2b03      	cmp	r3, #3
 8000758:	d1fa      	bne.n	8000750 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800075a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800075e:	f7ff fed9 	bl	8000514 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000762:	bf00      	nop
 8000764:	f7ff feea 	bl	800053c <LL_PWR_IsActiveFlag_VOS>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1fa      	bne.n	8000764 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSI_Enable();
 800076e:	f7ff fd61 	bl	8000234 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000772:	bf00      	nop
 8000774:	f7ff fd6e 	bl	8000254 <LL_RCC_HSI_IsReady>
 8000778:	4603      	mov	r3, r0
 800077a:	2b01      	cmp	r3, #1
 800077c:	d1fa      	bne.n	8000774 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(64);
 800077e:	2040      	movs	r0, #64	@ 0x40
 8000780:	f7ff fd7c 	bl	800027c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000784:	2300      	movs	r3, #0
 8000786:	2208      	movs	r2, #8
 8000788:	2100      	movs	r1, #0
 800078a:	2002      	movs	r0, #2
 800078c:	f7ff fe28 	bl	80003e0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000790:	f7ff fe46 	bl	8000420 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000794:	f7ff fe00 	bl	8000398 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000798:	bf00      	nop
 800079a:	f7ff fe0d 	bl	80003b8 <LL_RCC_PLL_IsReady>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d1fa      	bne.n	800079a <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80007a4:	2003      	movs	r0, #3
 80007a6:	f7ff fd7f 	bl	80002a8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80007aa:	bf00      	nop
 80007ac:	f7ff fd90 	bl	80002d0 <LL_RCC_GetSysClkSource>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b0c      	cmp	r3, #12
 80007b4:	d1fa      	bne.n	80007ac <SystemClock_Config+0x68>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff fd98 	bl	80002ec <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80007bc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80007c0:	f7ff fda8 	bl	8000314 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 80007c4:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 80007c8:	f7ff fdb8 	bl	800033c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 80007cc:	4803      	ldr	r0, [pc, #12]	@ (80007dc <SystemClock_Config+0x98>)
 80007ce:	f001 f9a9 	bl	8001b24 <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 80007d2:	4802      	ldr	r0, [pc, #8]	@ (80007dc <SystemClock_Config+0x98>)
 80007d4:	f001 f9b4 	bl	8001b40 <LL_SetSystemCoreClock>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	03d09000 	.word	0x03d09000

080007e0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 80007f4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80007f8:	f7ff fe52 	bl	80004a0 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000804:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000808:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4619      	mov	r1, r3
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_TIM16_Init+0x4c>)
 8000818:	f000 ffea 	bl	80017f0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 800081c:	4803      	ldr	r0, [pc, #12]	@ (800082c <MX_TIM16_Init+0x4c>)
 800081e:	f7ff fea1 	bl	8000564 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40014400 	.word	0x40014400

08000830 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	@ 0x38
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 800085a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800085e:	f7ff fd81 	bl	8000364 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000862:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000866:	f7ff fe1b 	bl	80004a0 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800086a:	2002      	movs	r0, #2
 800086c:	f7ff fde8 	bl	8000440 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000870:	23c0      	movs	r3, #192	@ 0xc0
 8000872:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000874:	2302      	movs	r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000884:	2307      	movs	r3, #7
 8000886:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4619      	mov	r1, r3
 800088c:	4810      	ldr	r0, [pc, #64]	@ (80008d0 <MX_USART1_UART_Init+0xa0>)
 800088e:	f000 fb49 	bl	8000f24 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000892:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000896:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80008a4:	230c      	movs	r3, #12
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4807      	ldr	r0, [pc, #28]	@ (80008d4 <MX_USART1_UART_Init+0xa4>)
 80008b8:	f001 f89e 	bl	80019f8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80008bc:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_USART1_UART_Init+0xa4>)
 80008be:	f7ff fe71 	bl	80005a4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80008c2:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <MX_USART1_UART_Init+0xa4>)
 80008c4:	f7ff fe5e 	bl	8000584 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3738      	adds	r7, #56	@ 0x38
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	48000400 	.word	0x48000400
 80008d4:	40013800 	.word	0x40013800

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80008dc:	2080      	movs	r0, #128	@ 0x80
 80008de:	f7ff fdaf 	bl	8000440 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80008e2:	2002      	movs	r0, #2
 80008e4:	f7ff fdac 	bl	8000440 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008fc:	2b40      	cmp	r3, #64	@ 0x40
 80008fe:	d101      	bne.n	8000904 <LL_USART_IsActiveFlag_TC+0x18>
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <LL_USART_IsActiveFlag_TC+0x1a>
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000922:	2b80      	cmp	r3, #128	@ 0x80
 8000924:	d101      	bne.n	800092a <LL_USART_IsActiveFlag_TXE+0x18>
 8000926:	2301      	movs	r3, #1
 8000928:	e000      	b.n	800092c <LL_USART_IsActiveFlag_TXE+0x1a>
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	b29a      	uxth	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <uart_write>:
//		size--;
//	}
//}


void uart_write(USART_TypeDef *huart,const char *data) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
    while (*data) {
 8000962:	e015      	b.n	8000990 <uart_write+0x38>
        // Wait until the data register is empty
        while (!LL_USART_IsActiveFlag_TXE(USART1));
 8000964:	bf00      	nop
 8000966:	4810      	ldr	r0, [pc, #64]	@ (80009a8 <uart_write+0x50>)
 8000968:	f7ff ffd3 	bl	8000912 <LL_USART_IsActiveFlag_TXE>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0f9      	beq.n	8000966 <uart_write+0xe>

        // Transmit the character
        LL_USART_TransmitData8(USART1, *data++);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	603a      	str	r2, [r7, #0]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	480a      	ldr	r0, [pc, #40]	@ (80009a8 <uart_write+0x50>)
 800097e:	f7ff ffdb 	bl	8000938 <LL_USART_TransmitData8>

        // Wait until the transmission is complete
        while (!LL_USART_IsActiveFlag_TC(USART1));
 8000982:	bf00      	nop
 8000984:	4808      	ldr	r0, [pc, #32]	@ (80009a8 <uart_write+0x50>)
 8000986:	f7ff ffb1 	bl	80008ec <LL_USART_IsActiveFlag_TC>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0f9      	beq.n	8000984 <uart_write+0x2c>
    while (*data) {
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1e5      	bne.n	8000964 <uart_write+0xc>
    }
    MY_Delay(500);
 8000998:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800099c:	f000 f8f2 	bl	8000b84 <MY_Delay>

}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40013800 	.word	0x40013800

080009ac <LL_TIM_EnableCounter>:
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f043 0201 	orr.w	r2, r3, #1
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	601a      	str	r2, [r3, #0]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(const TIM_TypeDef *TIMx)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f06f 0201 	mvn.w	r2, #1
 8000a42:	611a      	str	r2, [r3, #16]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d101      	bne.n	8000a68 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000a64:	2301      	movs	r3, #1
 8000a66:	e000      	b.n	8000a6a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	f043 0201 	orr.w	r2, r3, #1
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	60da      	str	r2, [r3, #12]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <LL_APB1_GRP1_EnableClock>:
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aa2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000aa4:	4907      	ldr	r1, [pc, #28]	@ (8000ac4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <MY_TIMER_Init>:
 */


#include "my_timer.h"

void MY_TIMER_Init(void) {
 8000ac8:	b598      	push	{r3, r4, r7, lr}
 8000aca:	af00      	add	r7, sp, #0
    // Enable the clock for TIM2
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff ffe3 	bl	8000a98 <LL_APB1_GRP1_EnableClock>

    // Set the TIM2 prescaler to have the counter clocked at 1 MHz (assuming the system clock is 80 MHz)
    LL_TIM_SetPrescaler(TIM2, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000));
 8000ad2:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <MY_TIMER_Init+0xb0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a29      	ldr	r2, [pc, #164]	@ (8000b7c <MY_TIMER_Init+0xb4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d90b      	bls.n	8000af4 <MY_TIMER_Init+0x2c>
 8000adc:	4b26      	ldr	r3, [pc, #152]	@ (8000b78 <MY_TIMER_Init+0xb0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f503 23f4 	add.w	r3, r3, #499712	@ 0x7a000
 8000ae4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000ae8:	4a25      	ldr	r2, [pc, #148]	@ (8000b80 <MY_TIMER_Init+0xb8>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	0c9b      	lsrs	r3, r3, #18
 8000af0:	3b01      	subs	r3, #1
 8000af2:	e000      	b.n	8000af6 <MY_TIMER_Init+0x2e>
 8000af4:	2300      	movs	r3, #0
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000afc:	f7ff ff72 	bl	80009e4 <LL_TIM_SetPrescaler>

    // Set the auto-reload value to have the counter overflow at 1 kHz
    LL_TIM_SetAutoReload(TIM2, __LL_TIM_CALC_ARR(SystemCoreClock/2, LL_TIM_GetPrescaler(TIM2), 1000));
 8000b00:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <MY_TIMER_Init+0xb0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	085c      	lsrs	r4, r3, #1
 8000b06:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000b0a:	f7ff ff79 	bl	8000a00 <LL_TIM_GetPrescaler>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	3301      	adds	r3, #1
 8000b12:	fbb4 f3f3 	udiv	r3, r4, r3
 8000b16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b1a:	d310      	bcc.n	8000b3e <MY_TIMER_Init+0x76>
 8000b1c:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <MY_TIMER_Init+0xb0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	085c      	lsrs	r4, r3, #1
 8000b22:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000b26:	f7ff ff6b 	bl	8000a00 <LL_TIM_GetPrescaler>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b32:	fb02 f303 	mul.w	r3, r2, r3
 8000b36:	fbb4 f3f3 	udiv	r3, r4, r3
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <MY_TIMER_Init+0x78>
 8000b3e:	2300      	movs	r3, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000b46:	f7ff ff67 	bl	8000a18 <LL_TIM_SetAutoReload>

    // Enable the update interrupt
    LL_TIM_EnableIT_UPDATE(TIM2);
 8000b4a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000b4e:	f7ff ff92 	bl	8000a76 <LL_TIM_EnableIT_UPDATE>

    // Enable the counter
    LL_TIM_EnableCounter(TIM2);
 8000b52:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000b56:	f7ff ff29 	bl	80009ac <LL_TIM_EnableCounter>

    // Wait for the update event to make sure the timer is properly initialized
    while(!LL_TIM_IsActiveFlag_UPDATE(TIM2));
 8000b5a:	bf00      	nop
 8000b5c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000b60:	f7ff ff76 	bl	8000a50 <LL_TIM_IsActiveFlag_UPDATE>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f8      	beq.n	8000b5c <MY_TIMER_Init+0x94>

    // Clear the update flag
    LL_TIM_ClearFlag_UPDATE(TIM2);
 8000b6a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000b6e:	f7ff ff61 	bl	8000a34 <LL_TIM_ClearFlag_UPDATE>
}
 8000b72:	bf00      	nop
 8000b74:	bd98      	pop	{r3, r4, r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000108 	.word	0x20000108
 8000b7c:	000f423f 	.word	0x000f423f
 8000b80:	431bde83 	.word	0x431bde83

08000b84 <MY_Delay>:

void MY_Delay(uint32_t ms) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    uint32_t start_time = LL_TIM_GetCounter(TIM2);
 8000b8c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000b90:	f7ff ff1c 	bl	80009cc <LL_TIM_GetCounter>
 8000b94:	60f8      	str	r0, [r7, #12]
    while ((LL_TIM_GetCounter(TIM2) - start_time) < ms);
 8000b96:	bf00      	nop
 8000b98:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000b9c:	f7ff ff16 	bl	80009cc <LL_TIM_GetCounter>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f5      	bhi.n	8000b98 <MY_Delay+0x14>
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bba:	bf00      	nop
 8000bbc:	e7fd      	b.n	8000bba <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	bf00      	nop
 8000bc4:	e7fd      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bca:	bf00      	nop
 8000bcc:	e7fd      	b.n	8000bca <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	bf00      	nop
 8000bd4:	e7fd      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bda:	bf00      	nop
 8000bdc:	e7fd      	b.n	8000bda <UsageFault_Handler+0x4>

08000bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c40:	f7ff ffea 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	@ (8000c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <LoopForever+0xe>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c88 <LoopForever+0x16>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f000 ff79 	bl	8001b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6e:	f7ff fd01 	bl	8000674 <main>

08000c72 <LoopForever>:

LoopForever:
    b LoopForever
 8000c72:	e7fe      	b.n	8000c72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000c80:	08001c54 	.word	0x08001c54
  ldr r2, =_sbss
 8000c84:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000c88:	20000128 	.word	0x20000128

08000c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_2_IRQHandler>

08000c8e <LL_GPIO_SetPinMode>:
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b08b      	sub	sp, #44	@ 0x2c
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa93 f3a3 	rbit	r3, r3
 8000ca8:	613b      	str	r3, [r7, #16]
  return result;
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	e003      	b.n	8000cc0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fab3 f383 	clz	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	401a      	ands	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	fa93 f3a3 	rbit	r3, r3
 8000cd6:	61fb      	str	r3, [r7, #28]
  return result;
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000ce2:	2320      	movs	r3, #32
 8000ce4:	e003      	b.n	8000cee <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce8:	fab3 f383 	clz	r3, r3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	372c      	adds	r7, #44	@ 0x2c
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_GPIO_SetPinOutputType>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	fb01 f303 	mul.w	r3, r1, r3
 8000d26:	431a      	orrs	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	605a      	str	r2, [r3, #4]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <LL_GPIO_SetPinSpeed>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b08b      	sub	sp, #44	@ 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa93 f3a3 	rbit	r3, r3
 8000d52:	613b      	str	r3, [r7, #16]
  return result;
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000d5e:	2320      	movs	r3, #32
 8000d60:	e003      	b.n	8000d6a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	fab3 f383 	clz	r3, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2103      	movs	r1, #3
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	401a      	ands	r2, r3
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	61fb      	str	r3, [r7, #28]
  return result;
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000d8c:	2320      	movs	r3, #32
 8000d8e:	e003      	b.n	8000d98 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d92:	fab3 f383 	clz	r3, r3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	431a      	orrs	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	609a      	str	r2, [r3, #8]
}
 8000da6:	bf00      	nop
 8000da8:	372c      	adds	r7, #44	@ 0x2c
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <LL_GPIO_SetPinPull>:
{
 8000db2:	b480      	push	{r7}
 8000db4:	b08b      	sub	sp, #44	@ 0x2c
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa93 f3a3 	rbit	r3, r3
 8000dcc:	613b      	str	r3, [r7, #16]
  return result;
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000dd8:	2320      	movs	r3, #32
 8000dda:	e003      	b.n	8000de4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fab3 f383 	clz	r3, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2103      	movs	r1, #3
 8000de8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	401a      	ands	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	fa93 f3a3 	rbit	r3, r3
 8000dfa:	61fb      	str	r3, [r7, #28]
  return result;
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000e06:	2320      	movs	r3, #32
 8000e08:	e003      	b.n	8000e12 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0c:	fab3 f383 	clz	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	60da      	str	r2, [r3, #12]
}
 8000e20:	bf00      	nop
 8000e22:	372c      	adds	r7, #44	@ 0x2c
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_GPIO_SetAFPin_0_7>:
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b08b      	sub	sp, #44	@ 0x2c
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6a1a      	ldr	r2, [r3, #32]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa93 f3a3 	rbit	r3, r3
 8000e46:	613b      	str	r3, [r7, #16]
  return result;
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000e52:	2320      	movs	r3, #32
 8000e54:	e003      	b.n	8000e5e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	fab3 f383 	clz	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	210f      	movs	r1, #15
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	401a      	ands	r2, r3
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	fa93 f3a3 	rbit	r3, r3
 8000e74:	61fb      	str	r3, [r7, #28]
  return result;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000e80:	2320      	movs	r3, #32
 8000e82:	e003      	b.n	8000e8c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e86:	fab3 f383 	clz	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	431a      	orrs	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	621a      	str	r2, [r3, #32]
}
 8000e9a:	bf00      	nop
 8000e9c:	372c      	adds	r7, #44	@ 0x2c
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <LL_GPIO_SetAFPin_8_15>:
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b08b      	sub	sp, #44	@ 0x2c
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa93 f3a3 	rbit	r3, r3
 8000ec2:	613b      	str	r3, [r7, #16]
  return result;
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	e003      	b.n	8000eda <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	fab3 f383 	clz	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	210f      	movs	r1, #15
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eec:	6a3b      	ldr	r3, [r7, #32]
 8000eee:	fa93 f3a3 	rbit	r3, r3
 8000ef2:	61fb      	str	r3, [r7, #28]
  return result;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000efe:	2320      	movs	r3, #32
 8000f00:	e003      	b.n	8000f0a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	fab3 f383 	clz	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	431a      	orrs	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000f18:	bf00      	nop
 8000f1a:	372c      	adds	r7, #44	@ 0x2c
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	60fb      	str	r3, [r7, #12]
  return result;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <LL_GPIO_Init+0x26>
    return 32U;
 8000f46:	2320      	movs	r3, #32
 8000f48:	e003      	b.n	8000f52 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	fab3 f383 	clz	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000f54:	e048      	b.n	8000fe8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d03a      	beq.n	8000fe2 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d003      	beq.n	8000f7c <LL_GPIO_Init+0x58>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d10e      	bne.n	8000f9a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	461a      	mov	r2, r3
 8000f82:	69b9      	ldr	r1, [r7, #24]
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fed7 	bl	8000d38 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	6819      	ldr	r1, [r3, #0]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	461a      	mov	r2, r3
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff feb7 	bl	8000d08 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	69b9      	ldr	r1, [r7, #24]
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ff05 	bl	8000db2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d111      	bne.n	8000fd4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2bff      	cmp	r3, #255	@ 0xff
 8000fb4:	d807      	bhi.n	8000fc6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	69b9      	ldr	r1, [r7, #24]
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff34 	bl	8000e2c <LL_GPIO_SetAFPin_0_7>
 8000fc4:	e006      	b.n	8000fd4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	69b9      	ldr	r1, [r7, #24]
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff69 	bl	8000ea6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	69b9      	ldr	r1, [r7, #24]
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff fe56 	bl	8000c8e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1af      	bne.n	8000f56 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LL_RCC_HSI_IsReady>:
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001004:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <LL_RCC_HSI_IsReady+0x24>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800100c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001010:	d101      	bne.n	8001016 <LL_RCC_HSI_IsReady+0x16>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <LL_RCC_HSI_IsReady+0x18>
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <LL_RCC_LSE_IsReady>:
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <LL_RCC_LSE_IsReady+0x24>)
 800102e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b02      	cmp	r3, #2
 8001038:	d101      	bne.n	800103e <LL_RCC_LSE_IsReady+0x16>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <LL_RCC_LSE_IsReady+0x18>
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000

08001050 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	2b08      	cmp	r3, #8
 800105e:	d101      	bne.n	8001064 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000

08001074 <LL_RCC_MSI_GetRange>:
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <LL_RCC_MSI_GetRange+0x18>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8001096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800109a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40021000 	.word	0x40021000

080010ac <LL_RCC_GetSysClkSource>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <LL_RCC_GetSysClkSource+0x18>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 030c 	and.w	r3, r3, #12
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000

080010c8 <LL_RCC_GetAHBPrescaler>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <LL_RCC_GetAHBPrescaler+0x18>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <LL_RCC_GetAPB1Prescaler>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <LL_RCC_GetAPB1Prescaler+0x18>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <LL_RCC_GetAPB2Prescaler>:
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <LL_RCC_GetUSARTClockSource>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <LL_RCC_GetUSARTClockSource+0x24>)
 8001126:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	401a      	ands	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	041b      	lsls	r3, r3, #16
 8001132:	4313      	orrs	r3, r2
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40021000 	.word	0x40021000

08001144 <LL_RCC_GetUARTClockSource>:
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <LL_RCC_GetUARTClockSource+0x24>)
 800114e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	401a      	ands	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	041b      	lsls	r3, r3, #16
 800115a:	4313      	orrs	r3, r2
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000

0800116c <LL_RCC_PLL_GetMainSource>:
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <LL_RCC_PLL_GetMainSource+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	f003 0303 	and.w	r3, r3, #3
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000

08001188 <LL_RCC_PLL_GetN>:
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800118c:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <LL_RCC_PLL_GetN+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40021000 	.word	0x40021000

080011a4 <LL_RCC_PLL_GetR>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <LL_RCC_PLL_GetR+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000

080011c0 <LL_RCC_PLL_GetDivider>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <LL_RCC_PLL_GetDivider+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d137      	bne.n	800125e <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff94 	bl	800111c <LL_RCC_GetUSARTClockSource>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	f200 80b3 	bhi.w	8001366 <LL_RCC_GetUSARTClockFreq+0x18a>
 8001200:	a201      	add	r2, pc, #4	@ (adr r2, 8001208 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8001202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001206:	bf00      	nop
 8001208:	08001247 	.word	0x08001247
 800120c:	08001219 	.word	0x08001219
 8001210:	08001221 	.word	0x08001221
 8001214:	08001233 	.word	0x08001233
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001218:	f000 f956 	bl	80014c8 <RCC_GetSystemClockFreq>
 800121c:	60f8      	str	r0, [r7, #12]
        break;
 800121e:	e0b3      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001220:	f7ff feee 	bl	8001000 <LL_RCC_HSI_IsReady>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 809f 	beq.w	800136a <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 800122c:	4b59      	ldr	r3, [pc, #356]	@ (8001394 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800122e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001230:	e09b      	b.n	800136a <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001232:	f7ff fef9 	bl	8001028 <LL_RCC_LSE_IsReady>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 8098 	beq.w	800136e <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800123e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001242:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001244:	e093      	b.n	800136e <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001246:	f000 f93f 	bl	80014c8 <RCC_GetSystemClockFreq>
 800124a:	4603      	mov	r3, r0
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f9cb 	bl	80015e8 <RCC_GetHCLKClockFreq>
 8001252:	4603      	mov	r3, r0
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f9f1 	bl	800163c <RCC_GetPCLK2ClockFreq>
 800125a:	60f8      	str	r0, [r7, #12]
        break;
 800125c:	e094      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0c      	cmp	r3, #12
 8001262:	d146      	bne.n	80012f2 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff59 	bl	800111c <LL_RCC_GetUSARTClockSource>
 800126a:	4603      	mov	r3, r0
 800126c:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d87e      	bhi.n	8001372 <LL_RCC_GetUSARTClockFreq+0x196>
 8001274:	a201      	add	r2, pc, #4	@ (adr r2, 800127c <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127a:	bf00      	nop
 800127c:	080012db 	.word	0x080012db
 8001280:	08001373 	.word	0x08001373
 8001284:	08001373 	.word	0x08001373
 8001288:	08001373 	.word	0x08001373
 800128c:	080012b1 	.word	0x080012b1
 8001290:	08001373 	.word	0x08001373
 8001294:	08001373 	.word	0x08001373
 8001298:	08001373 	.word	0x08001373
 800129c:	080012b9 	.word	0x080012b9
 80012a0:	08001373 	.word	0x08001373
 80012a4:	08001373 	.word	0x08001373
 80012a8:	08001373 	.word	0x08001373
 80012ac:	080012c9 	.word	0x080012c9
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80012b0:	f000 f90a 	bl	80014c8 <RCC_GetSystemClockFreq>
 80012b4:	60f8      	str	r0, [r7, #12]
        break;
 80012b6:	e067      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80012b8:	f7ff fea2 	bl	8001000 <LL_RCC_HSI_IsReady>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d059      	beq.n	8001376 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80012c2:	4b34      	ldr	r3, [pc, #208]	@ (8001394 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80012c4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80012c6:	e056      	b.n	8001376 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80012c8:	f7ff feae 	bl	8001028 <LL_RCC_LSE_IsReady>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d053      	beq.n	800137a <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80012d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012d6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80012d8:	e04f      	b.n	800137a <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80012da:	f000 f8f5 	bl	80014c8 <RCC_GetSystemClockFreq>
 80012de:	4603      	mov	r3, r0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f981 	bl	80015e8 <RCC_GetHCLKClockFreq>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f993 	bl	8001614 <RCC_GetPCLK1ClockFreq>
 80012ee:	60f8      	str	r0, [r7, #12]
        break;
 80012f0:	e04a      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b30      	cmp	r3, #48	@ 0x30
 80012f6:	d147      	bne.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff0f 	bl	800111c <LL_RCC_GetUSARTClockSource>
 80012fe:	4603      	mov	r3, r0
 8001300:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8001304:	d01a      	beq.n	800133c <LL_RCC_GetUSARTClockFreq+0x160>
 8001306:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800130a:	d838      	bhi.n	800137e <LL_RCC_GetUSARTClockFreq+0x1a2>
 800130c:	4a22      	ldr	r2, [pc, #136]	@ (8001398 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00c      	beq.n	800132c <LL_RCC_GetUSARTClockFreq+0x150>
 8001312:	4a21      	ldr	r2, [pc, #132]	@ (8001398 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d832      	bhi.n	800137e <LL_RCC_GetUSARTClockFreq+0x1a2>
 8001318:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800131c:	d017      	beq.n	800134e <LL_RCC_GetUSARTClockFreq+0x172>
 800131e:	4a1f      	ldr	r2, [pc, #124]	@ (800139c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d12c      	bne.n	800137e <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8001324:	f000 f8d0 	bl	80014c8 <RCC_GetSystemClockFreq>
 8001328:	60f8      	str	r0, [r7, #12]
          break;
 800132a:	e02d      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800132c:	f7ff fe68 	bl	8001000 <LL_RCC_HSI_IsReady>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d025      	beq.n	8001382 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001338:	60fb      	str	r3, [r7, #12]
          }
          break;
 800133a:	e022      	b.n	8001382 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800133c:	f7ff fe74 	bl	8001028 <LL_RCC_LSE_IsReady>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d01f      	beq.n	8001386 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8001346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800134a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800134c:	e01b      	b.n	8001386 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800134e:	f000 f8bb 	bl	80014c8 <RCC_GetSystemClockFreq>
 8001352:	4603      	mov	r3, r0
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f947 	bl	80015e8 <RCC_GetHCLKClockFreq>
 800135a:	4603      	mov	r3, r0
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f959 	bl	8001614 <RCC_GetPCLK1ClockFreq>
 8001362:	60f8      	str	r0, [r7, #12]
          break;
 8001364:	e010      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001366:	bf00      	nop
 8001368:	e00e      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800136a:	bf00      	nop
 800136c:	e00c      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800136e:	bf00      	nop
 8001370:	e00a      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001372:	bf00      	nop
 8001374:	e008      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001376:	bf00      	nop
 8001378:	e006      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800137a:	bf00      	nop
 800137c:	e004      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 800137e:	bf00      	nop
 8001380:	e002      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8001382:	bf00      	nop
 8001384:	e000      	b.n	8001388 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8001386:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8001388:	68fb      	ldr	r3, [r7, #12]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	00f42400 	.word	0x00f42400
 8001398:	00300020 	.word	0x00300020
 800139c:	00300010 	.word	0x00300010

080013a0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80013b0:	d13b      	bne.n	800142a <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fec6 	bl	8001144 <LL_RCC_GetUARTClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 80013be:	d01a      	beq.n	80013f6 <LL_RCC_GetUARTClockFreq+0x56>
 80013c0:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 80013c4:	d82c      	bhi.n	8001420 <LL_RCC_GetUARTClockFreq+0x80>
 80013c6:	4a3b      	ldr	r2, [pc, #236]	@ (80014b4 <LL_RCC_GetUARTClockFreq+0x114>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d00c      	beq.n	80013e6 <LL_RCC_GetUARTClockFreq+0x46>
 80013cc:	4a39      	ldr	r2, [pc, #228]	@ (80014b4 <LL_RCC_GetUARTClockFreq+0x114>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d826      	bhi.n	8001420 <LL_RCC_GetUARTClockFreq+0x80>
 80013d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80013d6:	d017      	beq.n	8001408 <LL_RCC_GetUARTClockFreq+0x68>
 80013d8:	4a37      	ldr	r2, [pc, #220]	@ (80014b8 <LL_RCC_GetUARTClockFreq+0x118>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d120      	bne.n	8001420 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80013de:	f000 f873 	bl	80014c8 <RCC_GetSystemClockFreq>
 80013e2:	60f8      	str	r0, [r7, #12]
        break;
 80013e4:	e021      	b.n	800142a <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80013e6:	f7ff fe0b 	bl	8001000 <LL_RCC_HSI_IsReady>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d019      	beq.n	8001424 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 80013f0:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <LL_RCC_GetUARTClockFreq+0x11c>)
 80013f2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80013f4:	e016      	b.n	8001424 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80013f6:	f7ff fe17 	bl	8001028 <LL_RCC_LSE_IsReady>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 8001400:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001404:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001406:	e00f      	b.n	8001428 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001408:	f000 f85e 	bl	80014c8 <RCC_GetSystemClockFreq>
 800140c:	4603      	mov	r3, r0
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f8ea 	bl	80015e8 <RCC_GetHCLKClockFreq>
 8001414:	4603      	mov	r3, r0
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f8fc 	bl	8001614 <RCC_GetPCLK1ClockFreq>
 800141c:	60f8      	str	r0, [r7, #12]
        break;
 800141e:	e004      	b.n	800142a <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 8001420:	bf00      	nop
 8001422:	e002      	b.n	800142a <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8001424:	bf00      	nop
 8001426:	e000      	b.n	800142a <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8001428:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001430:	d13b      	bne.n	80014aa <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fe86 	bl	8001144 <LL_RCC_GetUARTClockSource>
 8001438:	4603      	mov	r3, r0
 800143a:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800143e:	d01a      	beq.n	8001476 <LL_RCC_GetUARTClockFreq+0xd6>
 8001440:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8001444:	d82c      	bhi.n	80014a0 <LL_RCC_GetUARTClockFreq+0x100>
 8001446:	4a1e      	ldr	r2, [pc, #120]	@ (80014c0 <LL_RCC_GetUARTClockFreq+0x120>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d00c      	beq.n	8001466 <LL_RCC_GetUARTClockFreq+0xc6>
 800144c:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <LL_RCC_GetUARTClockFreq+0x120>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d826      	bhi.n	80014a0 <LL_RCC_GetUARTClockFreq+0x100>
 8001452:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001456:	d017      	beq.n	8001488 <LL_RCC_GetUARTClockFreq+0xe8>
 8001458:	4a1a      	ldr	r2, [pc, #104]	@ (80014c4 <LL_RCC_GetUARTClockFreq+0x124>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d120      	bne.n	80014a0 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800145e:	f000 f833 	bl	80014c8 <RCC_GetSystemClockFreq>
 8001462:	60f8      	str	r0, [r7, #12]
        break;
 8001464:	e021      	b.n	80014aa <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001466:	f7ff fdcb 	bl	8001000 <LL_RCC_HSI_IsReady>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d019      	beq.n	80014a4 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <LL_RCC_GetUARTClockFreq+0x11c>)
 8001472:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001474:	e016      	b.n	80014a4 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001476:	f7ff fdd7 	bl	8001028 <LL_RCC_LSE_IsReady>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d013      	beq.n	80014a8 <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 8001480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001484:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001486:	e00f      	b.n	80014a8 <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001488:	f000 f81e 	bl	80014c8 <RCC_GetSystemClockFreq>
 800148c:	4603      	mov	r3, r0
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f8aa 	bl	80015e8 <RCC_GetHCLKClockFreq>
 8001494:	4603      	mov	r3, r0
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f8bc 	bl	8001614 <RCC_GetPCLK1ClockFreq>
 800149c:	60f8      	str	r0, [r7, #12]
        break;
 800149e:	e004      	b.n	80014aa <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 80014a0:	bf00      	nop
 80014a2:	e002      	b.n	80014aa <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 80014a4:	bf00      	nop
 80014a6:	e000      	b.n	80014aa <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 80014a8:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	00c00080 	.word	0x00c00080
 80014b8:	00c00040 	.word	0x00c00040
 80014bc:	00f42400 	.word	0x00f42400
 80014c0:	03000200 	.word	0x03000200
 80014c4:	03000100 	.word	0x03000100

080014c8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80014ce:	f7ff fded 	bl	80010ac <LL_RCC_GetSysClkSource>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b0c      	cmp	r3, #12
 80014d6:	d851      	bhi.n	800157c <RCC_GetSystemClockFreq+0xb4>
 80014d8:	a201      	add	r2, pc, #4	@ (adr r2, 80014e0 <RCC_GetSystemClockFreq+0x18>)
 80014da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014de:	bf00      	nop
 80014e0:	08001515 	.word	0x08001515
 80014e4:	0800157d 	.word	0x0800157d
 80014e8:	0800157d 	.word	0x0800157d
 80014ec:	0800157d 	.word	0x0800157d
 80014f0:	08001569 	.word	0x08001569
 80014f4:	0800157d 	.word	0x0800157d
 80014f8:	0800157d 	.word	0x0800157d
 80014fc:	0800157d 	.word	0x0800157d
 8001500:	0800156f 	.word	0x0800156f
 8001504:	0800157d 	.word	0x0800157d
 8001508:	0800157d 	.word	0x0800157d
 800150c:	0800157d 	.word	0x0800157d
 8001510:	08001575 	.word	0x08001575
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001514:	f7ff fd9c 	bl	8001050 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d111      	bne.n	8001542 <RCC_GetSystemClockFreq+0x7a>
 800151e:	f7ff fd97 	bl	8001050 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <RCC_GetSystemClockFreq+0x6a>
 8001528:	f7ff fda4 	bl	8001074 <LL_RCC_MSI_GetRange>
 800152c:	4603      	mov	r3, r0
 800152e:	0a1b      	lsrs	r3, r3, #8
 8001530:	e003      	b.n	800153a <RCC_GetSystemClockFreq+0x72>
 8001532:	f7ff fdad 	bl	8001090 <LL_RCC_MSI_GetRangeAfterStandby>
 8001536:	4603      	mov	r3, r0
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	4a28      	ldr	r2, [pc, #160]	@ (80015dc <RCC_GetSystemClockFreq+0x114>)
 800153c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001540:	e010      	b.n	8001564 <RCC_GetSystemClockFreq+0x9c>
 8001542:	f7ff fd85 	bl	8001050 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <RCC_GetSystemClockFreq+0x8e>
 800154c:	f7ff fd92 	bl	8001074 <LL_RCC_MSI_GetRange>
 8001550:	4603      	mov	r3, r0
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	e003      	b.n	800155e <RCC_GetSystemClockFreq+0x96>
 8001556:	f7ff fd9b 	bl	8001090 <LL_RCC_MSI_GetRangeAfterStandby>
 800155a:	4603      	mov	r3, r0
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	4a1f      	ldr	r2, [pc, #124]	@ (80015dc <RCC_GetSystemClockFreq+0x114>)
 8001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001564:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001566:	e033      	b.n	80015d0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <RCC_GetSystemClockFreq+0x118>)
 800156a:	607b      	str	r3, [r7, #4]
      break;
 800156c:	e030      	b.n	80015d0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800156e:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <RCC_GetSystemClockFreq+0x11c>)
 8001570:	607b      	str	r3, [r7, #4]
      break;
 8001572:	e02d      	b.n	80015d0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001574:	f000 f876 	bl	8001664 <RCC_PLL_GetFreqDomain_SYS>
 8001578:	6078      	str	r0, [r7, #4]
      break;
 800157a:	e029      	b.n	80015d0 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800157c:	f7ff fd68 	bl	8001050 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d111      	bne.n	80015aa <RCC_GetSystemClockFreq+0xe2>
 8001586:	f7ff fd63 	bl	8001050 <LL_RCC_MSI_IsEnabledRangeSelect>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d004      	beq.n	800159a <RCC_GetSystemClockFreq+0xd2>
 8001590:	f7ff fd70 	bl	8001074 <LL_RCC_MSI_GetRange>
 8001594:	4603      	mov	r3, r0
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	e003      	b.n	80015a2 <RCC_GetSystemClockFreq+0xda>
 800159a:	f7ff fd79 	bl	8001090 <LL_RCC_MSI_GetRangeAfterStandby>
 800159e:	4603      	mov	r3, r0
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	4a0e      	ldr	r2, [pc, #56]	@ (80015dc <RCC_GetSystemClockFreq+0x114>)
 80015a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a8:	e010      	b.n	80015cc <RCC_GetSystemClockFreq+0x104>
 80015aa:	f7ff fd51 	bl	8001050 <LL_RCC_MSI_IsEnabledRangeSelect>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <RCC_GetSystemClockFreq+0xf6>
 80015b4:	f7ff fd5e 	bl	8001074 <LL_RCC_MSI_GetRange>
 80015b8:	4603      	mov	r3, r0
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	e003      	b.n	80015c6 <RCC_GetSystemClockFreq+0xfe>
 80015be:	f7ff fd67 	bl	8001090 <LL_RCC_MSI_GetRangeAfterStandby>
 80015c2:	4603      	mov	r3, r0
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <RCC_GetSystemClockFreq+0x114>)
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80015ce:	bf00      	nop
  }

  return frequency;
 80015d0:	687b      	ldr	r3, [r7, #4]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	08001c1c 	.word	0x08001c1c
 80015e0:	00f42400 	.word	0x00f42400
 80015e4:	007a1200 	.word	0x007a1200

080015e8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80015f0:	f7ff fd6a 	bl	80010c8 <LL_RCC_GetAHBPrescaler>
 80015f4:	4603      	mov	r3, r0
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <RCC_GetHCLKClockFreq+0x28>)
 80015fe:	5cd3      	ldrb	r3, [r2, r3]
 8001600:	461a      	mov	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	40d3      	lsrs	r3, r2
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	08001c04 	.word	0x08001c04

08001614 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800161c:	f7ff fd62 	bl	80010e4 <LL_RCC_GetAPB1Prescaler>
 8001620:	4603      	mov	r3, r0
 8001622:	0a1b      	lsrs	r3, r3, #8
 8001624:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <RCC_GetPCLK1ClockFreq+0x24>)
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	40d3      	lsrs	r3, r2
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	08001c14 	.word	0x08001c14

0800163c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001644:	f7ff fd5c 	bl	8001100 <LL_RCC_GetAPB2Prescaler>
 8001648:	4603      	mov	r3, r0
 800164a:	0adb      	lsrs	r3, r3, #11
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <RCC_GetPCLK2ClockFreq+0x24>)
 800164e:	5cd3      	ldrb	r3, [r2, r3]
 8001650:	461a      	mov	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	40d3      	lsrs	r3, r2
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	08001c14 	.word	0x08001c14

08001664 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800166a:	f7ff fd7f 	bl	800116c <LL_RCC_PLL_GetMainSource>
 800166e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d036      	beq.n	80016e4 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d836      	bhi.n	80016ea <RCC_PLL_GetFreqDomain_SYS+0x86>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d003      	beq.n	800168a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d02a      	beq.n	80016de <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8001688:	e02f      	b.n	80016ea <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800168a:	f7ff fce1 	bl	8001050 <LL_RCC_MSI_IsEnabledRangeSelect>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d111      	bne.n	80016b8 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8001694:	f7ff fcdc 	bl	8001050 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800169e:	f7ff fce9 	bl	8001074 <LL_RCC_MSI_GetRange>
 80016a2:	4603      	mov	r3, r0
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	e003      	b.n	80016b0 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80016a8:	f7ff fcf2 	bl	8001090 <LL_RCC_MSI_GetRangeAfterStandby>
 80016ac:	4603      	mov	r3, r0
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001770 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	e010      	b.n	80016da <RCC_PLL_GetFreqDomain_SYS+0x76>
 80016b8:	f7ff fcca 	bl	8001050 <LL_RCC_MSI_IsEnabledRangeSelect>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <RCC_PLL_GetFreqDomain_SYS+0x68>
 80016c2:	f7ff fcd7 	bl	8001074 <LL_RCC_MSI_GetRange>
 80016c6:	4603      	mov	r3, r0
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	e003      	b.n	80016d4 <RCC_PLL_GetFreqDomain_SYS+0x70>
 80016cc:	f7ff fce0 	bl	8001090 <LL_RCC_MSI_GetRangeAfterStandby>
 80016d0:	4603      	mov	r3, r0
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	4a26      	ldr	r2, [pc, #152]	@ (8001770 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80016d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016da:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80016dc:	e02f      	b.n	800173e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80016de:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80016e0:	607b      	str	r3, [r7, #4]
      break;
 80016e2:	e02c      	b.n	800173e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80016e4:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80016e6:	607b      	str	r3, [r7, #4]
      break;
 80016e8:	e029      	b.n	800173e <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80016ea:	f7ff fcb1 	bl	8001050 <LL_RCC_MSI_IsEnabledRangeSelect>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d111      	bne.n	8001718 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80016f4:	f7ff fcac 	bl	8001050 <LL_RCC_MSI_IsEnabledRangeSelect>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80016fe:	f7ff fcb9 	bl	8001074 <LL_RCC_MSI_GetRange>
 8001702:	4603      	mov	r3, r0
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	e003      	b.n	8001710 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8001708:	f7ff fcc2 	bl	8001090 <LL_RCC_MSI_GetRangeAfterStandby>
 800170c:	4603      	mov	r3, r0
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	4a17      	ldr	r2, [pc, #92]	@ (8001770 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	e010      	b.n	800173a <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8001718:	f7ff fc9a 	bl	8001050 <LL_RCC_MSI_IsEnabledRangeSelect>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d004      	beq.n	800172c <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8001722:	f7ff fca7 	bl	8001074 <LL_RCC_MSI_GetRange>
 8001726:	4603      	mov	r3, r0
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	e003      	b.n	8001734 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 800172c:	f7ff fcb0 	bl	8001090 <LL_RCC_MSI_GetRangeAfterStandby>
 8001730:	4603      	mov	r3, r0
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	4a0e      	ldr	r2, [pc, #56]	@ (8001770 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800173c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800173e:	f7ff fd3f 	bl	80011c0 <LL_RCC_PLL_GetDivider>
 8001742:	4603      	mov	r3, r0
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	3301      	adds	r3, #1
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	fbb2 f4f3 	udiv	r4, r2, r3
 800174e:	f7ff fd1b 	bl	8001188 <LL_RCC_PLL_GetN>
 8001752:	4603      	mov	r3, r0
 8001754:	fb03 f404 	mul.w	r4, r3, r4
 8001758:	f7ff fd24 	bl	80011a4 <LL_RCC_PLL_GetR>
 800175c:	4603      	mov	r3, r0
 800175e:	0e5b      	lsrs	r3, r3, #25
 8001760:	3301      	adds	r3, #1
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	08001c1c 	.word	0x08001c1c
 8001774:	00f42400 	.word	0x00f42400
 8001778:	007a1200 	.word	0x007a1200

0800177c <LL_TIM_SetPrescaler>:
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_TIM_SetAutoReload>:
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_TIM_SetRepetitionCounter>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	615a      	str	r2, [r3, #20]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a3d      	ldr	r2, [pc, #244]	@ (80018f8 <LL_TIM_Init+0x108>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d013      	beq.n	8001830 <LL_TIM_Init+0x40>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800180e:	d00f      	beq.n	8001830 <LL_TIM_Init+0x40>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a3a      	ldr	r2, [pc, #232]	@ (80018fc <LL_TIM_Init+0x10c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d00b      	beq.n	8001830 <LL_TIM_Init+0x40>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a39      	ldr	r2, [pc, #228]	@ (8001900 <LL_TIM_Init+0x110>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d007      	beq.n	8001830 <LL_TIM_Init+0x40>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a38      	ldr	r2, [pc, #224]	@ (8001904 <LL_TIM_Init+0x114>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d003      	beq.n	8001830 <LL_TIM_Init+0x40>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a37      	ldr	r2, [pc, #220]	@ (8001908 <LL_TIM_Init+0x118>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d106      	bne.n	800183e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a2d      	ldr	r2, [pc, #180]	@ (80018f8 <LL_TIM_Init+0x108>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d01f      	beq.n	8001886 <LL_TIM_Init+0x96>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800184c:	d01b      	beq.n	8001886 <LL_TIM_Init+0x96>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a2a      	ldr	r2, [pc, #168]	@ (80018fc <LL_TIM_Init+0x10c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d017      	beq.n	8001886 <LL_TIM_Init+0x96>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a29      	ldr	r2, [pc, #164]	@ (8001900 <LL_TIM_Init+0x110>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <LL_TIM_Init+0x96>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a28      	ldr	r2, [pc, #160]	@ (8001904 <LL_TIM_Init+0x114>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00f      	beq.n	8001886 <LL_TIM_Init+0x96>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a27      	ldr	r2, [pc, #156]	@ (8001908 <LL_TIM_Init+0x118>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00b      	beq.n	8001886 <LL_TIM_Init+0x96>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a26      	ldr	r2, [pc, #152]	@ (800190c <LL_TIM_Init+0x11c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <LL_TIM_Init+0x96>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a25      	ldr	r2, [pc, #148]	@ (8001910 <LL_TIM_Init+0x120>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d003      	beq.n	8001886 <LL_TIM_Init+0x96>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a24      	ldr	r2, [pc, #144]	@ (8001914 <LL_TIM_Init+0x124>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d106      	bne.n	8001894 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	4619      	mov	r1, r3
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff79 	bl	8001798 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	4619      	mov	r1, r3
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff65 	bl	800177c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a10      	ldr	r2, [pc, #64]	@ (80018f8 <LL_TIM_Init+0x108>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00f      	beq.n	80018da <LL_TIM_Init+0xea>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <LL_TIM_Init+0x118>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00b      	beq.n	80018da <LL_TIM_Init+0xea>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a11      	ldr	r2, [pc, #68]	@ (800190c <LL_TIM_Init+0x11c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <LL_TIM_Init+0xea>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a10      	ldr	r2, [pc, #64]	@ (8001910 <LL_TIM_Init+0x120>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d003      	beq.n	80018da <LL_TIM_Init+0xea>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001914 <LL_TIM_Init+0x124>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d105      	bne.n	80018e6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	4619      	mov	r1, r3
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff67 	bl	80017b4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff72 	bl	80017d0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40012c00 	.word	0x40012c00
 80018fc:	40000400 	.word	0x40000400
 8001900:	40000800 	.word	0x40000800
 8001904:	40000c00 	.word	0x40000c00
 8001908:	40013400 	.word	0x40013400
 800190c:	40014000 	.word	0x40014000
 8001910:	40014400 	.word	0x40014400
 8001914:	40014800 	.word	0x40014800

08001918 <LL_USART_IsEnabled>:
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <LL_USART_IsEnabled+0x18>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <LL_USART_IsEnabled+0x1a>
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_USART_SetStopBitsLength>:
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	605a      	str	r2, [r3, #4]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_USART_SetHWFlowCtrl>:
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	609a      	str	r2, [r3, #8]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_USART_SetBaudRate>:
{
 800198a:	b480      	push	{r7}
 800198c:	b087      	sub	sp, #28
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800199e:	d11a      	bne.n	80019d6 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	005a      	lsls	r2, r3, #1
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	085b      	lsrs	r3, r3, #1
 80019a8:	441a      	add	r2, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	60da      	str	r2, [r3, #12]
}
 80019d4:	e00a      	b.n	80019ec <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	085a      	lsrs	r2, r3, #1
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	441a      	add	r2, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	60da      	str	r2, [r3, #12]
}
 80019ec:	bf00      	nop
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ff84 	bl	8001918 <LL_USART_IsEnabled>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d15b      	bne.n	8001ace <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad8 <LL_USART_Init+0xe0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	6851      	ldr	r1, [r2, #4]
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	68d2      	ldr	r2, [r2, #12]
 8001a26:	4311      	orrs	r1, r2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	6912      	ldr	r2, [r2, #16]
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	6992      	ldr	r2, [r2, #24]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff7c 	bl	800193e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff89 	bl	8001964 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a21      	ldr	r2, [pc, #132]	@ (8001adc <LL_USART_Init+0xe4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d104      	bne.n	8001a64 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001a5a:	2003      	movs	r0, #3
 8001a5c:	f7ff fbbe 	bl	80011dc <LL_RCC_GetUSARTClockFreq>
 8001a60:	60b8      	str	r0, [r7, #8]
 8001a62:	e023      	b.n	8001aac <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae0 <LL_USART_Init+0xe8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d104      	bne.n	8001a76 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001a6c:	200c      	movs	r0, #12
 8001a6e:	f7ff fbb5 	bl	80011dc <LL_RCC_GetUSARTClockFreq>
 8001a72:	60b8      	str	r0, [r7, #8]
 8001a74:	e01a      	b.n	8001aac <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae4 <LL_USART_Init+0xec>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d104      	bne.n	8001a88 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8001a7e:	2030      	movs	r0, #48	@ 0x30
 8001a80:	f7ff fbac 	bl	80011dc <LL_RCC_GetUSARTClockFreq>
 8001a84:	60b8      	str	r0, [r7, #8]
 8001a86:	e011      	b.n	8001aac <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a17      	ldr	r2, [pc, #92]	@ (8001ae8 <LL_USART_Init+0xf0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d104      	bne.n	8001a9a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8001a90:	20c0      	movs	r0, #192	@ 0xc0
 8001a92:	f7ff fc85 	bl	80013a0 <LL_RCC_GetUARTClockFreq>
 8001a96:	60b8      	str	r0, [r7, #8]
 8001a98:	e008      	b.n	8001aac <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a13      	ldr	r2, [pc, #76]	@ (8001aec <LL_USART_Init+0xf4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d104      	bne.n	8001aac <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8001aa2:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8001aa6:	f7ff fc7b 	bl	80013a0 <LL_RCC_GetUARTClockFreq>
 8001aaa:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00d      	beq.n	8001ace <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001ac6:	68b9      	ldr	r1, [r7, #8]
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff5e 	bl	800198a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	efff69f3 	.word	0xefff69f3
 8001adc:	40013800 	.word	0x40013800
 8001ae0:	40004400 	.word	0x40004400
 8001ae4:	40004800 	.word	0x40004800
 8001ae8:	40004c00 	.word	0x40004c00
 8001aec:	40005000 	.word	0x40005000

08001af0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <LL_InitTick+0x30>)
 8001b04:	3b01      	subs	r3, #1
 8001b06:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <LL_InitTick+0x30>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <LL_InitTick+0x30>)
 8001b10:	2205      	movs	r2, #5
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001b2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ffdd 	bl	8001af0 <LL_InitTick>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001b48:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <LL_SetSystemCoreClock+0x1c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000108 	.word	0x20000108

08001b60 <__libc_init_array>:
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	4d0d      	ldr	r5, [pc, #52]	@ (8001b98 <__libc_init_array+0x38>)
 8001b64:	4c0d      	ldr	r4, [pc, #52]	@ (8001b9c <__libc_init_array+0x3c>)
 8001b66:	1b64      	subs	r4, r4, r5
 8001b68:	10a4      	asrs	r4, r4, #2
 8001b6a:	2600      	movs	r6, #0
 8001b6c:	42a6      	cmp	r6, r4
 8001b6e:	d109      	bne.n	8001b84 <__libc_init_array+0x24>
 8001b70:	4d0b      	ldr	r5, [pc, #44]	@ (8001ba0 <__libc_init_array+0x40>)
 8001b72:	4c0c      	ldr	r4, [pc, #48]	@ (8001ba4 <__libc_init_array+0x44>)
 8001b74:	f000 f818 	bl	8001ba8 <_init>
 8001b78:	1b64      	subs	r4, r4, r5
 8001b7a:	10a4      	asrs	r4, r4, #2
 8001b7c:	2600      	movs	r6, #0
 8001b7e:	42a6      	cmp	r6, r4
 8001b80:	d105      	bne.n	8001b8e <__libc_init_array+0x2e>
 8001b82:	bd70      	pop	{r4, r5, r6, pc}
 8001b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b88:	4798      	blx	r3
 8001b8a:	3601      	adds	r6, #1
 8001b8c:	e7ee      	b.n	8001b6c <__libc_init_array+0xc>
 8001b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b92:	4798      	blx	r3
 8001b94:	3601      	adds	r6, #1
 8001b96:	e7f2      	b.n	8001b7e <__libc_init_array+0x1e>
 8001b98:	08001c4c 	.word	0x08001c4c
 8001b9c:	08001c4c 	.word	0x08001c4c
 8001ba0:	08001c4c 	.word	0x08001c4c
 8001ba4:	08001c50 	.word	0x08001c50

08001ba8 <_init>:
 8001ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001baa:	bf00      	nop
 8001bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bae:	bc08      	pop	{r3}
 8001bb0:	469e      	mov	lr, r3
 8001bb2:	4770      	bx	lr

08001bb4 <_fini>:
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb6:	bf00      	nop
 8001bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bba:	bc08      	pop	{r3}
 8001bbc:	469e      	mov	lr, r3
 8001bbe:	4770      	bx	lr
