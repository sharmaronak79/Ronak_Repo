
gpio_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000248  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f4  080003fc  000013fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f4  080003f4  000013fc  2**0
                  CONTENTS
  4 .ARM          00000000  080003f4  080003f4  000013fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f4  080003fc  000013fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f4  080003f4  000013f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003f8  080003f8  000013f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000013fc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000056d  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001cb  00000000  00000000  00001999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00001b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004a  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e845  00000000  00000000  00001c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000709  00000000  00000000  00020467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa53f  00000000  00000000  00020b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cb0af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000120  00000000  00000000  000cb0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000cb214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003dc 	.word	0x080003dc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003dc 	.word	0x080003dc

080001ec <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001f4:	4b08      	ldr	r3, [pc, #32]	@ (8000218 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001f8:	4907      	ldr	r1, [pc, #28]	@ (8000218 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000200:	4b05      	ldr	r3, [pc, #20]	@ (8000218 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000202:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4013      	ands	r3, r2
 8000208:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800020a:	68fb      	ldr	r3, [r7, #12]
}
 800020c:	bf00      	nop
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	40021000 	.word	0x40021000

0800021c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800021c:	b480      	push	{r7}
 800021e:	b08b      	sub	sp, #44	@ 0x2c
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	fa93 f3a3 	rbit	r3, r3
 8000236:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000238:	693b      	ldr	r3, [r7, #16]
 800023a:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d101      	bne.n	8000246 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000242:	2320      	movs	r3, #32
 8000244:	e003      	b.n	800024e <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000246:	69bb      	ldr	r3, [r7, #24]
 8000248:	fab3 f383 	clz	r3, r3
 800024c:	b2db      	uxtb	r3, r3
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	2103      	movs	r1, #3
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43db      	mvns	r3, r3
 8000258:	401a      	ands	r2, r3
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800025e:	6a3b      	ldr	r3, [r7, #32]
 8000260:	fa93 f3a3 	rbit	r3, r3
 8000264:	61fb      	str	r3, [r7, #28]
  return result;
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800026a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800026c:	2b00      	cmp	r3, #0
 800026e:	d101      	bne.n	8000274 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000270:	2320      	movs	r3, #32
 8000272:	e003      	b.n	800027c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000276:	fab3 f383 	clz	r3, r3
 800027a:	b2db      	uxtb	r3, r3
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	6879      	ldr	r1, [r7, #4]
 8000280:	fa01 f303 	lsl.w	r3, r1, r3
 8000284:	431a      	orrs	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	372c      	adds	r7, #44	@ 0x2c
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
 800029e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	691a      	ldr	r2, [r3, #16]
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	4013      	ands	r3, r2
 80002a8:	683a      	ldr	r2, [r7, #0]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d101      	bne.n	80002b2 <LL_GPIO_IsInputPinSet+0x1c>
 80002ae:	2301      	movs	r3, #1
 80002b0:	e000      	b.n	80002b4 <LL_GPIO_IsInputPinSet+0x1e>
 80002b2:	2300      	movs	r3, #0
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	683a      	ldr	r2, [r7, #0]
 80002ce:	619a      	str	r2, [r3, #24]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	683a      	ldr	r2, [r7, #0]
 80002ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <main>:
#include "stm32l4xx_ll_gpio.h"




int main(){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0



	/* Enable clock for GPIOC first*/
	LL_AHB2_GRP1_EnableClock (LL_AHB2_GRP1_PERIPH_GPIOC);
 80002fc:	2004      	movs	r0, #4
 80002fe:	f7ff ff75 	bl	80001ec <LL_AHB2_GRP1_EnableClock>


	/* Now declare pin PC7 as output pin*/
	LL_GPIO_SetPinMode (GPIOC,LL_GPIO_PIN_7 , LL_GPIO_MODE_OUTPUT);
 8000302:	2201      	movs	r2, #1
 8000304:	2180      	movs	r1, #128	@ 0x80
 8000306:	480d      	ldr	r0, [pc, #52]	@ (800033c <main+0x44>)
 8000308:	f7ff ff88 	bl	800021c <LL_GPIO_SetPinMode>

	/* Set PC13 as input pin */
	LL_GPIO_SetPinMode (GPIOC,LL_GPIO_PIN_13 , LL_GPIO_MODE_INPUT);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000312:	480a      	ldr	r0, [pc, #40]	@ (800033c <main+0x44>)
 8000314:	f7ff ff82 	bl	800021c <LL_GPIO_SetPinMode>

	/* if push button is pressed LED will be reset else  it will be set */
	while(1){

		if (LL_GPIO_IsInputPinSet (GPIOC,  LL_GPIO_PIN_13)){
 8000318:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800031c:	4807      	ldr	r0, [pc, #28]	@ (800033c <main+0x44>)
 800031e:	f7ff ffba 	bl	8000296 <LL_GPIO_IsInputPinSet>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d004      	beq.n	8000332 <main+0x3a>

			LL_GPIO_ResetOutputPin (GPIOC,LL_GPIO_PIN_7 );
 8000328:	2180      	movs	r1, #128	@ 0x80
 800032a:	4804      	ldr	r0, [pc, #16]	@ (800033c <main+0x44>)
 800032c:	f7ff ffd6 	bl	80002dc <LL_GPIO_ResetOutputPin>
 8000330:	e7f2      	b.n	8000318 <main+0x20>
		}
		else{

			LL_GPIO_SetOutputPin (GPIOC,LL_GPIO_PIN_7 );
 8000332:	2180      	movs	r1, #128	@ 0x80
 8000334:	4801      	ldr	r0, [pc, #4]	@ (800033c <main+0x44>)
 8000336:	f7ff ffc3 	bl	80002c0 <LL_GPIO_SetOutputPin>
		if (LL_GPIO_IsInputPinSet (GPIOC,  LL_GPIO_PIN_13)){
 800033a:	e7ed      	b.n	8000318 <main+0x20>
 800033c:	48000800 	.word	0x48000800

08000340 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000340:	480d      	ldr	r0, [pc, #52]	@ (8000378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000342:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000344:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000348:	480c      	ldr	r0, [pc, #48]	@ (800037c <LoopForever+0x6>)
  ldr r1, =_edata
 800034a:	490d      	ldr	r1, [pc, #52]	@ (8000380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800034c:	4a0d      	ldr	r2, [pc, #52]	@ (8000384 <LoopForever+0xe>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a0a      	ldr	r2, [pc, #40]	@ (8000388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000360:	4c0a      	ldr	r4, [pc, #40]	@ (800038c <LoopForever+0x16>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036e:	f000 f811 	bl	8000394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000372:	f7ff ffc1 	bl	80002f8 <main>

08000376 <LoopForever>:

LoopForever:
  b LoopForever
 8000376:	e7fe      	b.n	8000376 <LoopForever>
  ldr   r0, =_estack
 8000378:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000384:	080003fc 	.word	0x080003fc
  ldr r2, =_sbss
 8000388:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800038c:	2000001c 	.word	0x2000001c

08000390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC1_2_IRQHandler>
	...

08000394 <__libc_init_array>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	4d0d      	ldr	r5, [pc, #52]	@ (80003cc <__libc_init_array+0x38>)
 8000398:	4c0d      	ldr	r4, [pc, #52]	@ (80003d0 <__libc_init_array+0x3c>)
 800039a:	1b64      	subs	r4, r4, r5
 800039c:	10a4      	asrs	r4, r4, #2
 800039e:	2600      	movs	r6, #0
 80003a0:	42a6      	cmp	r6, r4
 80003a2:	d109      	bne.n	80003b8 <__libc_init_array+0x24>
 80003a4:	4d0b      	ldr	r5, [pc, #44]	@ (80003d4 <__libc_init_array+0x40>)
 80003a6:	4c0c      	ldr	r4, [pc, #48]	@ (80003d8 <__libc_init_array+0x44>)
 80003a8:	f000 f818 	bl	80003dc <_init>
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	10a4      	asrs	r4, r4, #2
 80003b0:	2600      	movs	r6, #0
 80003b2:	42a6      	cmp	r6, r4
 80003b4:	d105      	bne.n	80003c2 <__libc_init_array+0x2e>
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003bc:	4798      	blx	r3
 80003be:	3601      	adds	r6, #1
 80003c0:	e7ee      	b.n	80003a0 <__libc_init_array+0xc>
 80003c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c6:	4798      	blx	r3
 80003c8:	3601      	adds	r6, #1
 80003ca:	e7f2      	b.n	80003b2 <__libc_init_array+0x1e>
 80003cc:	080003f4 	.word	0x080003f4
 80003d0:	080003f4 	.word	0x080003f4
 80003d4:	080003f4 	.word	0x080003f4
 80003d8:	080003f8 	.word	0x080003f8

080003dc <_init>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr

080003e8 <_fini>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr
